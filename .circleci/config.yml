version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  # A parameter per package
  comply_advantage:
    type: boolean
    default: false
  creditsafe:
    type: boolean
    default: false
  dowjones_watchlist_api:
    type: boolean
    default: false
  duedil:
    type: boolean
    default: false
  equifax:
    type: boolean
    default: false
  onfido:
    type: boolean
    default: false
  vsure:
    type: boolean
    default: false
  iovation:
    type: boolean
    default: false
  bvd:
    type: boolean
    default: false
  worldcheck:
    type: boolean
    default: false
  trulioo:
    type: boolean
    default: false
  equifax_au:
    type: boolean
    default: false
  uk_charities_commission:
    type: boolean
    default: false
  cifas:
    type: boolean
    default: false
  reference_integration:
    type: boolean
    default: false
  docver_reference_integration:
      type: boolean
      default: false
  lexisnexis_id:
    type: boolean
    default: false

executors:
  python-builder:
    docker:
      - image: passfort/python-builder
  python:
    docker:
      - image: circleci/python:3.7
  cloud-deploy:
    docker:
      - image: passfort/cloud-deploy

commands:
  auth_ssh:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "ac:6b:35:cb:bd:84:53:fb:16:67:ea:91:d3:bc:91:f3"
  setup_gcp:
    steps:
      - run:
          name: Authenticate to GCP
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set compute/zone europe-west1-b
            gcloud config set project core-gearbox-112418
  determine_tree_hash:
    steps:
      - run:
          name: Determine git tree hash
          command: |
            echo 'export VERSION=$(git cat-file -p HEAD | head -c12 | tail -c7)' >> $BASH_ENV
            source $BASH_ENV

jobs:
  trigger-workflows:
    executor: python
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/circle_trigger.sh && .circleci/circle_trigger.sh
      - store_artifacts:
          path: coverage
          destination: coverage

  build:
    executor: python-builder
    parameters:
      package:
        type: string
    steps:
      - checkout
      - auth_ssh
      - setup_gcp
      - setup_remote_docker:
          docker_layer_caching:
      - run: |
          sudo pip install pipenv==2018.5.18
          pipenv --three
          pipenv install
          pipenv run python deploy.py -bs << parameters.package >> staging
  
  unit:
    executor: python-builder
    parameters:
      package:
        type: string
    steps:
      - checkout
      - setup_gcp
      - setup_remote_docker:
          docker_layer_caching:
      - determine_tree_hash
      - run: |
          gcloud docker -- pull eu.gcr.io/core-gearbox-112418/integrations-<< parameters.package >>:$VERSION
      - run: |
          docker run --name unit_<< parameters.package >> \
          -e CODECOV_TOKEN=$CODECOV_TOKEN \
          -e VCS_COMMIT_ID=$CIRCLE_SHA1 \
          -e VCS_BRANCH_NAME=$CIRCLE_BRANCH \
          -e CI_BUILD_ID=$CIRCLE_BUILD_NUM \
          eu.gcr.io/core-gearbox-112418/integrations-<< parameters.package >>:$VERSION \
          make unit
          docker cp unit_<< parameters.package >>:/src/coverage.xml coverage.xml || true
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml

  e2e:
    executor: python-builder
    parameters:
      package:
        type: string
    steps:
      - checkout
      - setup_gcp
      - setup_remote_docker:
          docker_layer_caching:
      - determine_tree_hash
      - run: |
          gcloud docker -- pull eu.gcr.io/core-gearbox-112418/integrations-<< parameters.package >>:$VERSION
          docker run -ti --name e2e_<< parameters.package >> \
          -e INTEGRATION=<< parameters.package >> \
          -e CODECOV_TOKEN=$CODECOV_TOKEN \
          -e VCS_COMMIT_ID=$CIRCLE_SHA1 \
          -e VCS_BRANCH_NAME=$CIRCLE_BRANCH \
          -e CI_BUILD_ID=$CIRCLE_BUILD_NUM \
          eu.gcr.io/core-gearbox-112418/integrations-<< parameters.package >>:$VERSION \
          make coverage
          docker cp e2e_<< parameters.package >>:/src/coverage.xml coverage.xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml
  
  unit_appengine:
    executor: python
    parameters:
      package:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo pip install -r << parameters.package >>/requirements.txt -r << parameters.package >>/requirements-dev.txt
      - run:
          name: Run tests
          command: |
            mkdir -p test-results/pytest
            pytest --junitxml=test-results/pytest/pytest.xml --cov=app << parameters.package >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results
      - run:
          name: Upload coverage
          command: |
            coverage xml -i
            codecov -F << parameters.package >> -X search -f coverage.xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml

  deploy_common:
    executor: python-builder
    parameters:
      package:
        type: string
      to:
        type: string
    steps:
      - checkout
      - auth_ssh
      - setup_gcp
      - run: |
          sudo pip install pip==18.0 &&
          sudo pip install pipenv==2018.5.18
          pipenv --three
          pipenv install
          pipenv run python deploy.py -ds << parameters.package >> << parameters.to >>
  
  deploy_appengine:
    executor: cloud-deploy
    parameters:
      package:
        type: string
    steps:
      - checkout
      - setup_gcp
      - run: |
          cat << parameters.package >>/env_variables.yaml.envsubst | envsubst > << parameters.package >>/env_variables.yaml
          cd << parameters.package >> && gcloud app deploy
  
  build_docker_image:
    executor: cloud-deploy
    parameters:
      package:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - setup_gcp
      - run: |
          cd << parameters.package >>
          echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin
          docker build --tag passfort/integrations-<< parameters.package >>:$CIRCLE_SHA1 .
          docker push passfort/integrations-<< parameters.package >>:$CIRCLE_SHA1
          if [ "$CIRCLE_BRANCH" == "staging" ]; then
            docker tag passfort/integrations-<< parameters.package >>:$CIRCLE_SHA1 passfort/integrations-<< parameters.package >>:latest
            docker push passfort/integrations-<< parameters.package >>:latest
          fi

workflows:
  version: 2

  # The main workflow responsible for triggering all other workflows
  # in which changes are detected.
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows:
          context: org-global

  comply_advantage:
    when: << pipeline.parameters.comply_advantage >>
    jobs:
      - build:
          name: build_comply_advantage
          package: comply_advantage
      - unit:
          name: unit_comply_advantage
          package: comply_advantage
          requires:
            - build_comply_advantage
      - e2e:
          name: e2e_comply_advantage
          package: comply_advantage
          requires:
            - build_comply_advantage
      - deploy_common:
          name: deploy_comply_advantage_staging
          package: comply_advantage
          to: staging
          requires:
            - e2e_comply_advantage
            - unit_comply_advantage
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_comply_advantage_production
          package: comply_advantage
          to: production
          requires:
            - e2e_comply_advantage
            - unit_comply_advantage
          filters:
              branches:
                  only:
                    - master

  dowjones_watchlist_api:
    when: << pipeline.parameters.dowjones_watchlist_api >>
    jobs:
      - build:
          name: build_dowjones_watchlist_api
          package: dowjones_watchlist_api
      - unit:
          name: unit_dowjones_watchlist_api
          package: dowjones_watchlist_api
          requires:
            - build_dowjones_watchlist_api
      - e2e:
          name: e2e_dowjones_watchlist_api
          package: dowjones_watchlist_api
          requires:
            - build_dowjones_watchlist_api
      - deploy_common:
          name: deploy_dowjones_watchlist_api_staging
          package: dowjones_watchlist_api
          to: staging
          requires:
            - e2e_dowjones_watchlist_api
            - unit_dowjones_watchlist_api
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_dowjones_watchlist_api_production
          package: dowjones_watchlist_api
          to: production
          requires:
            - e2e_dowjones_watchlist_api
            - unit_dowjones_watchlist_api
          filters:
              branches:
                  only:
                    - master

  duedil:
    when: << pipeline.parameters.duedil >>
    jobs:
      - build:
          name: build_duedil
          package: duedil
      - unit:
          name: unit_duedil
          package: duedil
          requires:
            - build_duedil
      - e2e:
          name: e2e_duedil
          package: duedil
          requires:
            - build_duedil
      - deploy_common:
          name: deploy_duedil_staging
          package: duedil
          to: staging
          requires:
            - e2e_duedil
            - unit_duedil
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_duedil_production
          package: duedil
          to: production
          requires:
            - e2e_duedil
            - unit_duedil
          filters:
              branches:
                  only:
                    - master

  equifax:
    when: << pipeline.parameters.equifax >>
    jobs:
      - build:
          name: build_equifax
          package: equifax
      - unit:
          name: unit_equifax
          package: equifax
          requires:
            - build_equifax
      - e2e:
          name: e2e_equifax
          package: equifax
          requires:
            - build_equifax
      - deploy_common:
          name: deploy_equifax_staging
          package: equifax
          to: staging
          requires:
            - e2e_equifax
            - unit_equifax
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_equifax_production
          package: equifax
          to: production
          requires:
            - e2e_equifax
            - unit_equifax
          filters:
              branches:
                  only:
                    - master

  onfido:
    when: << pipeline.parameters.onfido >>
    jobs:
      - build:
          name: build_onfido
          package: onfido
      - unit:
          name: unit_onfido
          package: onfido
          requires:
            - build_onfido
      - e2e:
          name: e2e_onfido
          package: onfido
          requires:
            - build_onfido
      - deploy_common:
          name: deploy_onfido_staging
          package: onfido
          to: staging
          requires:
            - e2e_onfido
            - unit_onfido
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_onfido_production
          package: onfido
          to: production
          requires:
            - e2e_onfido
            - unit_onfido
          filters:
              branches:
                  only:
                    - master

  vsure:
    when: << pipeline.parameters.vsure >>
    jobs:
      - build:
          name: build_vsure
          package: vsure
      - unit:
          name: unit_vsure
          package: vsure
          requires:
            - build_vsure
      - e2e:
          name: e2e_vsure
          package: vsure
          requires:
            - build_vsure
      - deploy_common:
          name: deploy_vsure_staging
          package: vsure
          to: staging
          requires:
            - e2e_vsure
            - unit_vsure
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_vsure_production
          package: vsure
          to: production
          requires:
            - e2e_vsure
            - unit_vsure
          filters:
              branches:
                  only:
                    - master

  iovation:
    when: << pipeline.parameters.iovation >>
    jobs:
      - build:
          name: build_iovation
          package: iovation
      - unit:
          name: unit_iovation
          package: iovation
          requires:
            - build_iovation
      - e2e:
          name: e2e_iovation
          package: iovation
          requires:
            - build_iovation
      - deploy_common:
          name: deploy_iovation_staging
          package: iovation
          to: staging
          requires:
            - e2e_iovation
            - unit_iovation
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_iovation_production
          package: iovation
          to: production
          requires:
            - e2e_iovation
            - unit_iovation
          filters:
              branches:
                  only:
                    - master

  bvd:
    when: << pipeline.parameters.bvd >>
    jobs:
      - build:
          name: build_bvd
          package: bvd
      - unit:
          name: unit_bvd
          package: bvd
          requires:
            - build_bvd
      - e2e:
          name: e2e_bvd
          package: bvd
          requires:
            - build_bvd
      - deploy_common:
          name: deploy_bvd_staging
          package: bvd
          to: staging
          requires:
            - e2e_bvd
            - unit_bvd
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_bvd_production
          package: bvd
          to: production
          requires:
            - e2e_bvd
            - unit_bvd
          filters:
              branches:
                  only:
                    - master

  worldcheck:
    when: << pipeline.parameters.worldcheck >>
    jobs:
      - build:
          name: build_worldcheck
          package: worldcheck
      - unit:
          name: unit_worldcheck
          package: worldcheck
          requires:
            - build_worldcheck
      - e2e:
          name: e2e_worldcheck
          package: worldcheck
          requires:
            - build_worldcheck
      - deploy_common:
          name: deploy_worldcheck_staging
          package: worldcheck
          to: staging
          requires:
            - e2e_worldcheck
            - unit_worldcheck
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_worldcheck_production
          package: worldcheck
          to: production
          requires:
            - e2e_worldcheck
            - unit_worldcheck
          filters:
              branches:
                  only:
                    - master

  trulioo:
    when: << pipeline.parameters.trulioo >>
    jobs:
      - build:
          name: build_trulioo
          package: trulioo
      - unit:
          name: unit_trulioo
          package: trulioo
          requires:
            - build_trulioo
      - deploy_common:
          name: deploy_trulioo_staging
          package: trulioo
          to: staging
          requires:
            - unit_trulioo
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_trulioo_production
          package: trulioo
          to: production
          requires:
            - unit_trulioo
          filters:
              branches:
                  only:
                    - master

  uk_charities_commission:
    when: << pipeline.parameters.uk_charities_commission >>
    jobs:
      - build:
          name: build_uk_charities_commission
          package: uk_charities_commission
      - unit:
          name: unit_uk_charities_commission
          package: uk_charities_commission
          requires:
            - build_uk_charities_commission
      - e2e:
          name: e2e_uk_charities_commission
          package: uk_charities_commission
          requires:
            - build_uk_charities_commission
      - deploy_common:
          name: deploy_uk_charities_commission_staging
          package: uk_charities_commission
          to: staging
          requires:
            - e2e_uk_charities_commission
            - unit_uk_charities_commission
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_uk_charities_commission_production
          package: uk_charities_commission
          to: production
          requires:
            - e2e_uk_charities_commission
            - unit_uk_charities_commission
          filters:
              branches:
                  only:
                    - master

  creditsafe:
    when: << pipeline.parameters.creditsafe >>
    jobs:
      - build:
          name: build_creditsafe
          package: creditsafe
      - unit:
          name: unit_creditsafe
          package: creditsafe
          requires:
            - build_creditsafe
      - deploy_common:
          name: deploy_creditsafe_staging
          package: creditsafe
          to: staging
          requires:
            - unit_creditsafe
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_creditsafe_production
          package: creditsafe
          to: production
          requires:
            - unit_creditsafe
          filters:
              branches:
                  only:
                    - master

  equifax_au:
    when: << pipeline.parameters.equifax_au >>
    jobs:
      - build:
          name: build_equifax_au
          package: equifax_au
      - unit:
          name: unit_equifax_au
          package: equifax_au
          requires:
            - build_equifax_au
      - deploy_common:
          name: deploy_equifax_au_staging
          package: equifax_au
          to: staging
          requires:
            - unit_equifax_au
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_equifax_au_production
          package: equifax_au
          to: production
          requires:
            - unit_equifax_au
          filters:
              branches:
                  only:
                    - master

  cifas:
    when: << pipeline.parameters.cifas >>
    jobs:
      - build:
          name: build_cifas
          package: cifas
      - unit:
          name: unit_cifas
          package: cifas
          requires:
            - build_cifas
      - deploy_common:
          name: deploy_cifas_staging
          package: cifas
          to: staging
          requires:
            - unit_cifas
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_cifas_production
          package: cifas
          to: production
          requires:
            - unit_cifas
          filters:
              branches:
                  only:
                    - master

  reference_integration:
    when: << pipeline.parameters.reference_integration >>
    jobs:
      - unit_appengine:
          name: unit_reference_integration
          package: reference_integration
      - deploy_appengine:
          name: deploy_reference_integration_staging
          package: reference_integration
          requires:
            - unit_reference_integration
          filters:
              branches:
                only:
                  - staging
      - build_docker_image:
          context: org-global
          name: build_reference_integration_image
          package: reference_integration
          requires:
            - unit_reference_integration
          filters:
              branches:
                ignore:
                  - master

  docver_reference_integration:
    when: << pipeline.parameters.docver_reference_integration >>
    jobs:
      - unit_appengine:
          name: unit_docver_reference_integration
          package: docver_reference_integration
      - deploy_appengine:
          name: deploy_docver_reference_integration_staging
          package: docver_reference_integration
          requires:
            - unit_docver_reference_integration
          filters:
              branches:
                only:
                  - staging
      - build_docker_image:
          context: org-global
          name: build_docver_reference_integration_image
          package: docver_reference_integration
          requires:
            - unit_docver_reference_integration
          filters:
              branches:
                ignore:
                  - master

  lexisnexis_id:
    when: << pipeline.parameters.lexisnexis_id >>
    jobs:
      - build:
          name: build_lexisnexis_id
          package: lexisnexis_id
      - unit:
          name: unit_lexisnexis_id
          package: lexisnexis_id
          requires:
            - build_lexisnexis_id
      - deploy_common:
          name: deploy_lexisnexis_id_staging
          package: lexisnexis_id
          to: staging
          requires:
            - unit_lexisnexis_id
          filters:
              branches:
                only:
                  - staging
      - deploy_common:
          name: deploy_lexisnexis_id_production
          package: lexisnexis_id
          to: production
          requires:
            - unit_lexisnexis_id
          filters:
              branches:
                  only:
                    - master
