# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.language_code import LanguageCode  # noqa: F401,E501
from swagger_client.models.name_type import NameType  # noqa: F401,E501


class Name(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_name': 'str',
        'given_name': 'str',
        'language_code': 'LanguageCode',
        'last_name': 'str',
        'original_script': 'str',
        'prefix': 'str',
        'suffix': 'str',
        'type': 'NameType'
    }

    attribute_map = {
        'full_name': 'fullName',
        'given_name': 'givenName',
        'language_code': 'languageCode',
        'last_name': 'lastName',
        'original_script': 'originalScript',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'type': 'type'
    }

    def __init__(self, full_name=None, given_name=None, language_code=None, last_name=None, original_script=None, prefix=None, suffix=None, type=None):  # noqa: E501
        """Name - a model defined in Swagger"""  # noqa: E501

        self._full_name = None
        self._given_name = None
        self._language_code = None
        self._last_name = None
        self._original_script = None
        self._prefix = None
        self._suffix = None
        self._type = None
        self.discriminator = None

        if full_name is not None:
            self.full_name = full_name
        if given_name is not None:
            self.given_name = given_name
        if language_code is not None:
            self.language_code = language_code
        if last_name is not None:
            self.last_name = last_name
        if original_script is not None:
            self.original_script = original_script
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        if type is not None:
            self.type = type

    @property
    def full_name(self):
        """Gets the full_name of this Name.  # noqa: E501


        :return: The full_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Name.


        :param full_name: The full_name of this Name.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def given_name(self):
        """Gets the given_name of this Name.  # noqa: E501


        :return: The given_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Name.


        :param given_name: The given_name of this Name.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def language_code(self):
        """Gets the language_code of this Name.  # noqa: E501


        :return: The language_code of this Name.  # noqa: E501
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Name.


        :param language_code: The language_code of this Name.  # noqa: E501
        :type: LanguageCode
        """

        self._language_code = language_code

    @property
    def last_name(self):
        """Gets the last_name of this Name.  # noqa: E501


        :return: The last_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Name.


        :param last_name: The last_name of this Name.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def original_script(self):
        """Gets the original_script of this Name.  # noqa: E501


        :return: The original_script of this Name.  # noqa: E501
        :rtype: str
        """
        return self._original_script

    @original_script.setter
    def original_script(self, original_script):
        """Sets the original_script of this Name.


        :param original_script: The original_script of this Name.  # noqa: E501
        :type: str
        """

        self._original_script = original_script

    @property
    def prefix(self):
        """Gets the prefix of this Name.  # noqa: E501


        :return: The prefix of this Name.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Name.


        :param prefix: The prefix of this Name.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this Name.  # noqa: E501


        :return: The suffix of this Name.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Name.


        :param suffix: The suffix of this Name.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def type(self):
        """Gets the type of this Name.  # noqa: E501


        :return: The type of this Name.  # noqa: E501
        :rtype: NameType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Name.


        :param type: The type of this Name.  # noqa: E501
        :type: NameType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Name):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
