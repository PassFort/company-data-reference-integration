# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.action_detail import ActionDetail  # noqa: F401,E501
from swagger_client.models.address import Address  # noqa: F401,E501
from swagger_client.models.associate import Associate  # noqa: F401,E501
from swagger_client.models.contact_detail import ContactDetail  # noqa: F401,E501
from swagger_client.models.country_link import CountryLink  # noqa: F401,E501
from swagger_client.models.detail import Detail  # noqa: F401,E501
from swagger_client.models.entity_update_category import EntityUpdateCategory  # noqa: F401,E501
from swagger_client.models.entity_updated_dates import EntityUpdatedDates  # noqa: F401,E501
from swagger_client.models.file import File  # noqa: F401,E501
from swagger_client.models.identity_document import IdentityDocument  # noqa: F401,E501
from swagger_client.models.image import Image  # noqa: F401,E501
from swagger_client.models.name import Name  # noqa: F401,E501
from swagger_client.models.profile_entity_type import ProfileEntityType  # noqa: F401,E501
from swagger_client.models.provider import Provider  # noqa: F401,E501
from swagger_client.models.provider_source import ProviderSource  # noqa: F401,E501
from swagger_client.models.weblink import Weblink  # noqa: F401,E501


class Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[ActionDetail]',
        'active': 'bool',
        'addresses': 'list[Address]',
        'associates': 'list[Associate]',
        'category': 'str',
        'comments': 'str',
        'contacts': 'list[ContactDetail]',
        'country_links': 'list[CountryLink]',
        'creation_date': 'datetime',
        'deletion_date': 'datetime',
        'description': 'str',
        'details': 'list[Detail]',
        'entity_id': 'str',
        'entity_type': 'ProfileEntityType',
        'external_import_id': 'str',
        'files': 'list[File]',
        'identity_documents': 'list[IdentityDocument]',
        'images': 'list[Image]',
        'last_adjunct_change_date': 'datetime',
        'modification_date': 'datetime',
        'names': 'list[Name]',
        'previous_country_links': 'list[CountryLink]',
        'provider': 'Provider',
        'source_description': 'str',
        'source_uris': 'list[str]',
        'sources': 'list[ProviderSource]',
        'sub_category': 'str',
        'update_category': 'EntityUpdateCategory',
        'updated_dates': 'EntityUpdatedDates',
        'weblinks': 'list[Weblink]'
    }

    attribute_map = {
        'actions': 'actions',
        'active': 'active',
        'addresses': 'addresses',
        'associates': 'associates',
        'category': 'category',
        'comments': 'comments',
        'contacts': 'contacts',
        'country_links': 'countryLinks',
        'creation_date': 'creationDate',
        'deletion_date': 'deletionDate',
        'description': 'description',
        'details': 'details',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'external_import_id': 'externalImportId',
        'files': 'files',
        'identity_documents': 'identityDocuments',
        'images': 'images',
        'last_adjunct_change_date': 'lastAdjunctChangeDate',
        'modification_date': 'modificationDate',
        'names': 'names',
        'previous_country_links': 'previousCountryLinks',
        'provider': 'provider',
        'source_description': 'sourceDescription',
        'source_uris': 'sourceUris',
        'sources': 'sources',
        'sub_category': 'subCategory',
        'update_category': 'updateCategory',
        'updated_dates': 'updatedDates',
        'weblinks': 'weblinks'
    }

    discriminator_value_class_map = {
        'VesselEntity': 'VesselEntity',
        'CountryEntity': 'CountryEntity',
        'OrganisationEntity': 'OrganisationEntity',
        'IndividualEntity': 'IndividualEntity'
    }

    def __init__(self, actions=None, active=False, addresses=None, associates=None, category=None, comments=None, contacts=None, country_links=None, creation_date=None, deletion_date=None, description=None, details=None, entity_id=None, entity_type=None, external_import_id=None, files=None, identity_documents=None, images=None, last_adjunct_change_date=None, modification_date=None, names=None, previous_country_links=None, provider=None, source_description=None, source_uris=None, sources=None, sub_category=None, update_category=None, updated_dates=None, weblinks=None):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501

        self._actions = None
        self._active = None
        self._addresses = None
        self._associates = None
        self._category = None
        self._comments = None
        self._contacts = None
        self._country_links = None
        self._creation_date = None
        self._deletion_date = None
        self._description = None
        self._details = None
        self._entity_id = None
        self._entity_type = None
        self._external_import_id = None
        self._files = None
        self._identity_documents = None
        self._images = None
        self._last_adjunct_change_date = None
        self._modification_date = None
        self._names = None
        self._previous_country_links = None
        self._provider = None
        self._source_description = None
        self._source_uris = None
        self._sources = None
        self._sub_category = None
        self._update_category = None
        self._updated_dates = None
        self._weblinks = None
        self.discriminator = 'entityType'

        if actions is not None:
            self.actions = actions
        if active is not None:
            self.active = active
        if addresses is not None:
            self.addresses = addresses
        if associates is not None:
            self.associates = associates
        if category is not None:
            self.category = category
        if comments is not None:
            self.comments = comments
        if contacts is not None:
            self.contacts = contacts
        if country_links is not None:
            self.country_links = country_links
        if creation_date is not None:
            self.creation_date = creation_date
        if deletion_date is not None:
            self.deletion_date = deletion_date
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        if entity_id is not None:
            self.entity_id = entity_id
        self.entity_type = entity_type
        if external_import_id is not None:
            self.external_import_id = external_import_id
        if files is not None:
            self.files = files
        if identity_documents is not None:
            self.identity_documents = identity_documents
        if images is not None:
            self.images = images
        if last_adjunct_change_date is not None:
            self.last_adjunct_change_date = last_adjunct_change_date
        if modification_date is not None:
            self.modification_date = modification_date
        if names is not None:
            self.names = names
        if previous_country_links is not None:
            self.previous_country_links = previous_country_links
        if provider is not None:
            self.provider = provider
        if source_description is not None:
            self.source_description = source_description
        if source_uris is not None:
            self.source_uris = source_uris
        if sources is not None:
            self.sources = sources
        if sub_category is not None:
            self.sub_category = sub_category
        if update_category is not None:
            self.update_category = update_category
        if updated_dates is not None:
            self.updated_dates = updated_dates
        if weblinks is not None:
            self.weblinks = weblinks

    @property
    def actions(self):
        """Gets the actions of this Entity.  # noqa: E501


        :return: The actions of this Entity.  # noqa: E501
        :rtype: list[ActionDetail]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Entity.


        :param actions: The actions of this Entity.  # noqa: E501
        :type: list[ActionDetail]
        """

        self._actions = actions

    @property
    def active(self):
        """Gets the active of this Entity.  # noqa: E501


        :return: The active of this Entity.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Entity.


        :param active: The active of this Entity.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def addresses(self):
        """Gets the addresses of this Entity.  # noqa: E501


        :return: The addresses of this Entity.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Entity.


        :param addresses: The addresses of this Entity.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def associates(self):
        """Gets the associates of this Entity.  # noqa: E501


        :return: The associates of this Entity.  # noqa: E501
        :rtype: list[Associate]
        """
        return self._associates

    @associates.setter
    def associates(self, associates):
        """Sets the associates of this Entity.


        :param associates: The associates of this Entity.  # noqa: E501
        :type: list[Associate]
        """

        self._associates = associates

    @property
    def category(self):
        """Gets the category of this Entity.  # noqa: E501


        :return: The category of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Entity.


        :param category: The category of this Entity.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def comments(self):
        """Gets the comments of this Entity.  # noqa: E501


        :return: The comments of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Entity.


        :param comments: The comments of this Entity.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def contacts(self):
        """Gets the contacts of this Entity.  # noqa: E501


        :return: The contacts of this Entity.  # noqa: E501
        :rtype: list[ContactDetail]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Entity.


        :param contacts: The contacts of this Entity.  # noqa: E501
        :type: list[ContactDetail]
        """

        self._contacts = contacts

    @property
    def country_links(self):
        """Gets the country_links of this Entity.  # noqa: E501


        :return: The country_links of this Entity.  # noqa: E501
        :rtype: list[CountryLink]
        """
        return self._country_links

    @country_links.setter
    def country_links(self, country_links):
        """Sets the country_links of this Entity.


        :param country_links: The country_links of this Entity.  # noqa: E501
        :type: list[CountryLink]
        """

        self._country_links = country_links

    @property
    def creation_date(self):
        """Gets the creation_date of this Entity.  # noqa: E501


        :return: The creation_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Entity.


        :param creation_date: The creation_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def deletion_date(self):
        """Gets the deletion_date of this Entity.  # noqa: E501


        :return: The deletion_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._deletion_date

    @deletion_date.setter
    def deletion_date(self, deletion_date):
        """Sets the deletion_date of this Entity.


        :param deletion_date: The deletion_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._deletion_date = deletion_date

    @property
    def description(self):
        """Gets the description of this Entity.  # noqa: E501


        :return: The description of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entity.


        :param description: The description of this Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this Entity.  # noqa: E501


        :return: The details of this Entity.  # noqa: E501
        :rtype: list[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Entity.


        :param details: The details of this Entity.  # noqa: E501
        :type: list[Detail]
        """

        self._details = details

    @property
    def entity_id(self):
        """Gets the entity_id of this Entity.  # noqa: E501


        :return: The entity_id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Entity.


        :param entity_id: The entity_id of this Entity.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Entity.  # noqa: E501


        :return: The entity_type of this Entity.  # noqa: E501
        :rtype: ProfileEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Entity.


        :param entity_type: The entity_type of this Entity.  # noqa: E501
        :type: ProfileEntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def external_import_id(self):
        """Gets the external_import_id of this Entity.  # noqa: E501


        :return: The external_import_id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._external_import_id

    @external_import_id.setter
    def external_import_id(self, external_import_id):
        """Sets the external_import_id of this Entity.


        :param external_import_id: The external_import_id of this Entity.  # noqa: E501
        :type: str
        """

        self._external_import_id = external_import_id

    @property
    def files(self):
        """Gets the files of this Entity.  # noqa: E501


        :return: The files of this Entity.  # noqa: E501
        :rtype: list[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Entity.


        :param files: The files of this Entity.  # noqa: E501
        :type: list[File]
        """

        self._files = files

    @property
    def identity_documents(self):
        """Gets the identity_documents of this Entity.  # noqa: E501


        :return: The identity_documents of this Entity.  # noqa: E501
        :rtype: list[IdentityDocument]
        """
        return self._identity_documents

    @identity_documents.setter
    def identity_documents(self, identity_documents):
        """Sets the identity_documents of this Entity.


        :param identity_documents: The identity_documents of this Entity.  # noqa: E501
        :type: list[IdentityDocument]
        """

        self._identity_documents = identity_documents

    @property
    def images(self):
        """Gets the images of this Entity.  # noqa: E501


        :return: The images of this Entity.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Entity.


        :param images: The images of this Entity.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def last_adjunct_change_date(self):
        """Gets the last_adjunct_change_date of this Entity.  # noqa: E501


        :return: The last_adjunct_change_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_adjunct_change_date

    @last_adjunct_change_date.setter
    def last_adjunct_change_date(self, last_adjunct_change_date):
        """Sets the last_adjunct_change_date of this Entity.


        :param last_adjunct_change_date: The last_adjunct_change_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._last_adjunct_change_date = last_adjunct_change_date

    @property
    def modification_date(self):
        """Gets the modification_date of this Entity.  # noqa: E501


        :return: The modification_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this Entity.


        :param modification_date: The modification_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def names(self):
        """Gets the names of this Entity.  # noqa: E501


        :return: The names of this Entity.  # noqa: E501
        :rtype: list[Name]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Entity.


        :param names: The names of this Entity.  # noqa: E501
        :type: list[Name]
        """

        self._names = names

    @property
    def previous_country_links(self):
        """Gets the previous_country_links of this Entity.  # noqa: E501


        :return: The previous_country_links of this Entity.  # noqa: E501
        :rtype: list[CountryLink]
        """
        return self._previous_country_links

    @previous_country_links.setter
    def previous_country_links(self, previous_country_links):
        """Sets the previous_country_links of this Entity.


        :param previous_country_links: The previous_country_links of this Entity.  # noqa: E501
        :type: list[CountryLink]
        """

        self._previous_country_links = previous_country_links

    @property
    def provider(self):
        """Gets the provider of this Entity.  # noqa: E501


        :return: The provider of this Entity.  # noqa: E501
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Entity.


        :param provider: The provider of this Entity.  # noqa: E501
        :type: Provider
        """

        self._provider = provider

    @property
    def source_description(self):
        """Gets the source_description of this Entity.  # noqa: E501


        :return: The source_description of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._source_description

    @source_description.setter
    def source_description(self, source_description):
        """Sets the source_description of this Entity.


        :param source_description: The source_description of this Entity.  # noqa: E501
        :type: str
        """

        self._source_description = source_description

    @property
    def source_uris(self):
        """Gets the source_uris of this Entity.  # noqa: E501


        :return: The source_uris of this Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_uris

    @source_uris.setter
    def source_uris(self, source_uris):
        """Sets the source_uris of this Entity.


        :param source_uris: The source_uris of this Entity.  # noqa: E501
        :type: list[str]
        """

        self._source_uris = source_uris

    @property
    def sources(self):
        """Gets the sources of this Entity.  # noqa: E501


        :return: The sources of this Entity.  # noqa: E501
        :rtype: list[ProviderSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Entity.


        :param sources: The sources of this Entity.  # noqa: E501
        :type: list[ProviderSource]
        """

        self._sources = sources

    @property
    def sub_category(self):
        """Gets the sub_category of this Entity.  # noqa: E501


        :return: The sub_category of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this Entity.


        :param sub_category: The sub_category of this Entity.  # noqa: E501
        :type: str
        """

        self._sub_category = sub_category

    @property
    def update_category(self):
        """Gets the update_category of this Entity.  # noqa: E501


        :return: The update_category of this Entity.  # noqa: E501
        :rtype: EntityUpdateCategory
        """
        return self._update_category

    @update_category.setter
    def update_category(self, update_category):
        """Sets the update_category of this Entity.


        :param update_category: The update_category of this Entity.  # noqa: E501
        :type: EntityUpdateCategory
        """

        self._update_category = update_category

    @property
    def updated_dates(self):
        """Gets the updated_dates of this Entity.  # noqa: E501


        :return: The updated_dates of this Entity.  # noqa: E501
        :rtype: EntityUpdatedDates
        """
        return self._updated_dates

    @updated_dates.setter
    def updated_dates(self, updated_dates):
        """Sets the updated_dates of this Entity.


        :param updated_dates: The updated_dates of this Entity.  # noqa: E501
        :type: EntityUpdatedDates
        """

        self._updated_dates = updated_dates

    @property
    def weblinks(self):
        """Gets the weblinks of this Entity.  # noqa: E501


        :return: The weblinks of this Entity.  # noqa: E501
        :rtype: list[Weblink]
        """
        return self._weblinks

    @weblinks.setter
    def weblinks(self, weblinks):
        """Sets the weblinks of this Entity.


        :param weblinks: The weblinks of this Entity.  # noqa: E501
        :type: list[Weblink]
        """

        self._weblinks = weblinks

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
