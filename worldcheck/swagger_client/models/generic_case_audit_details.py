# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_audit_details import AbstractAuditDetails  # noqa: F401,E501
from swagger_client.models.batch_detail import BatchDetail  # noqa: F401,E501
from swagger_client.models.case_entity_type import CaseEntityType  # noqa: F401,E501
from swagger_client.models.type_available_selected import TypeAvailableSelected  # noqa: F401,E501


class GenericCaseAuditDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_details': 'list[BatchDetail]',
        'case_system_id': 'str',
        'case_id': 'str',
        'case_name': 'str',
        'entity_type': 'CaseEntityType',
        'update_date': 'datetime',
        'create_date': 'datetime',
        'group_name': 'str',
        'name_transposition': 'TypeAvailableSelected',
        'gender': 'str',
        'country': 'str',
        'nationality': 'str',
        'place_of_birth': 'str',
        'date_of_birth': 'date',
        'country_of_residence': 'str',
        'country_of_registration': 'str',
        'imo_number': 'str',
        'given_name': 'str',
        'last_name': 'str',
        'passport_gender': 'str',
        'issuing_state': 'str',
        'passport_nationality': 'str',
        'passport_date_of_birth': 'date',
        'document_type': 'str',
        'id_number': 'str',
        'custom_fields': 'dict(str, str)',
        'expiration_date': 'date'
    }

    attribute_map = {
        'batch_details': 'batchDetails',
        'case_system_id': 'caseSystemId',
        'case_id': 'caseId',
        'case_name': 'caseName',
        'entity_type': 'entityType',
        'update_date': 'updateDate',
        'create_date': 'createDate',
        'group_name': 'groupName',
        'name_transposition': 'nameTransposition',
        'gender': 'gender',
        'country': 'country',
        'nationality': 'nationality',
        'place_of_birth': 'placeOfBirth',
        'date_of_birth': 'dateOfBirth',
        'country_of_residence': 'countryOfResidence',
        'country_of_registration': 'countryOfRegistration',
        'imo_number': 'imoNumber',
        'given_name': 'givenName',
        'last_name': 'lastName',
        'passport_gender': 'passportGender',
        'issuing_state': 'issuingState',
        'passport_nationality': 'passportNationality',
        'passport_date_of_birth': 'passportDateOfBirth',
        'document_type': 'documentType',
        'id_number': 'idNumber',
        'custom_fields': 'customFields',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, batch_details=None, case_system_id=None, case_id=None, case_name=None, entity_type=None, update_date=None, create_date=None, group_name=None, name_transposition=None, gender=None, country=None, nationality=None, place_of_birth=None, date_of_birth=None, country_of_residence=None, country_of_registration=None, imo_number=None, given_name=None, last_name=None, passport_gender=None, issuing_state=None, passport_nationality=None, passport_date_of_birth=None, document_type=None, id_number=None, custom_fields=None, expiration_date=None):  # noqa: E501
        """GenericCaseAuditDetails - a model defined in Swagger"""  # noqa: E501

        self._batch_details = None
        self._case_system_id = None
        self._case_id = None
        self._case_name = None
        self._entity_type = None
        self._update_date = None
        self._create_date = None
        self._group_name = None
        self._name_transposition = None
        self._gender = None
        self._country = None
        self._nationality = None
        self._place_of_birth = None
        self._date_of_birth = None
        self._country_of_residence = None
        self._country_of_registration = None
        self._imo_number = None
        self._given_name = None
        self._last_name = None
        self._passport_gender = None
        self._issuing_state = None
        self._passport_nationality = None
        self._passport_date_of_birth = None
        self._document_type = None
        self._id_number = None
        self._custom_fields = None
        self._expiration_date = None
        self.discriminator = None

        if batch_details is not None:
            self.batch_details = batch_details
        self.case_system_id = case_system_id
        if case_id is not None:
            self.case_id = case_id
        self.case_name = case_name
        self.entity_type = entity_type
        self.update_date = update_date
        self.create_date = create_date
        self.group_name = group_name
        if name_transposition is not None:
            self.name_transposition = name_transposition
        if gender is not None:
            self.gender = gender
        if country is not None:
            self.country = country
        if nationality is not None:
            self.nationality = nationality
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if country_of_residence is not None:
            self.country_of_residence = country_of_residence
        if country_of_registration is not None:
            self.country_of_registration = country_of_registration
        if imo_number is not None:
            self.imo_number = imo_number
        if given_name is not None:
            self.given_name = given_name
        if last_name is not None:
            self.last_name = last_name
        if passport_gender is not None:
            self.passport_gender = passport_gender
        if issuing_state is not None:
            self.issuing_state = issuing_state
        if passport_nationality is not None:
            self.passport_nationality = passport_nationality
        if passport_date_of_birth is not None:
            self.passport_date_of_birth = passport_date_of_birth
        if document_type is not None:
            self.document_type = document_type
        if id_number is not None:
            self.id_number = id_number
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def batch_details(self):
        """Gets the batch_details of this GenericCaseAuditDetails.  # noqa: E501


        :return: The batch_details of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: list[BatchDetail]
        """
        return self._batch_details

    @batch_details.setter
    def batch_details(self, batch_details):
        """Sets the batch_details of this GenericCaseAuditDetails.


        :param batch_details: The batch_details of this GenericCaseAuditDetails.  # noqa: E501
        :type: list[BatchDetail]
        """

        self._batch_details = batch_details

    @property
    def case_system_id(self):
        """Gets the case_system_id of this GenericCaseAuditDetails.  # noqa: E501

        System generated ID for the Case  # noqa: E501

        :return: The case_system_id of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._case_system_id

    @case_system_id.setter
    def case_system_id(self, case_system_id):
        """Sets the case_system_id of this GenericCaseAuditDetails.

        System generated ID for the Case  # noqa: E501

        :param case_system_id: The case_system_id of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """
        if case_system_id is None:
            raise ValueError("Invalid value for `case_system_id`, must not be `None`")  # noqa: E501
        if case_system_id is not None and len(case_system_id) > 255:
            raise ValueError("Invalid value for `case_system_id`, length must be less than or equal to `255`")  # noqa: E501

        self._case_system_id = case_system_id

    @property
    def case_id(self):
        """Gets the case_id of this GenericCaseAuditDetails.  # noqa: E501

        Case ID provided by the client or else generated by the system for the client  # noqa: E501

        :return: The case_id of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this GenericCaseAuditDetails.

        Case ID provided by the client or else generated by the system for the client  # noqa: E501

        :param case_id: The case_id of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """
        if case_id is not None and len(case_id) > 1000:
            raise ValueError("Invalid value for `case_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._case_id = case_id

    @property
    def case_name(self):
        """Gets the case_name of this GenericCaseAuditDetails.  # noqa: E501

        Case name to be screened  # noqa: E501

        :return: The case_name of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this GenericCaseAuditDetails.

        Case name to be screened  # noqa: E501

        :param case_name: The case_name of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """
        if case_name is None:
            raise ValueError("Invalid value for `case_name`, must not be `None`")  # noqa: E501
        if case_name is not None and len(case_name) > 1000:
            raise ValueError("Invalid value for `case_name`, length must be less than or equal to `1000`")  # noqa: E501

        self._case_name = case_name

    @property
    def entity_type(self):
        """Gets the entity_type of this GenericCaseAuditDetails.  # noqa: E501


        :return: The entity_type of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: CaseEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this GenericCaseAuditDetails.


        :param entity_type: The entity_type of this GenericCaseAuditDetails.  # noqa: E501
        :type: CaseEntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def update_date(self):
        """Gets the update_date of this GenericCaseAuditDetails.  # noqa: E501

        Case update date and time  # noqa: E501

        :return: The update_date of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this GenericCaseAuditDetails.

        Case update date and time  # noqa: E501

        :param update_date: The update_date of this GenericCaseAuditDetails.  # noqa: E501
        :type: datetime
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")  # noqa: E501

        self._update_date = update_date

    @property
    def create_date(self):
        """Gets the create_date of this GenericCaseAuditDetails.  # noqa: E501

        Case creation date and time  # noqa: E501

        :return: The create_date of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this GenericCaseAuditDetails.

        Case creation date and time  # noqa: E501

        :param create_date: The create_date of this GenericCaseAuditDetails.  # noqa: E501
        :type: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def group_name(self):
        """Gets the group_name of this GenericCaseAuditDetails.  # noqa: E501


        :return: The group_name of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GenericCaseAuditDetails.


        :param group_name: The group_name of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def name_transposition(self):
        """Gets the name_transposition of this GenericCaseAuditDetails.  # noqa: E501


        :return: The name_transposition of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: TypeAvailableSelected
        """
        return self._name_transposition

    @name_transposition.setter
    def name_transposition(self, name_transposition):
        """Sets the name_transposition of this GenericCaseAuditDetails.


        :param name_transposition: The name_transposition of this GenericCaseAuditDetails.  # noqa: E501
        :type: TypeAvailableSelected
        """

        self._name_transposition = name_transposition

    @property
    def gender(self):
        """Gets the gender of this GenericCaseAuditDetails.  # noqa: E501


        :return: The gender of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this GenericCaseAuditDetails.


        :param gender: The gender of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def country(self):
        """Gets the country of this GenericCaseAuditDetails.  # noqa: E501


        :return: The country of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GenericCaseAuditDetails.


        :param country: The country of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def nationality(self):
        """Gets the nationality of this GenericCaseAuditDetails.  # noqa: E501


        :return: The nationality of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this GenericCaseAuditDetails.


        :param nationality: The nationality of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this GenericCaseAuditDetails.  # noqa: E501


        :return: The place_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this GenericCaseAuditDetails.


        :param place_of_birth: The place_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this GenericCaseAuditDetails.  # noqa: E501

        The 'date of birth' secondary field on this case  # noqa: E501

        :return: The date_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this GenericCaseAuditDetails.

        The 'date of birth' secondary field on this case  # noqa: E501

        :param date_of_birth: The date_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def country_of_residence(self):
        """Gets the country_of_residence of this GenericCaseAuditDetails.  # noqa: E501


        :return: The country_of_residence of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence):
        """Sets the country_of_residence of this GenericCaseAuditDetails.


        :param country_of_residence: The country_of_residence of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._country_of_residence = country_of_residence

    @property
    def country_of_registration(self):
        """Gets the country_of_registration of this GenericCaseAuditDetails.  # noqa: E501


        :return: The country_of_registration of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._country_of_registration

    @country_of_registration.setter
    def country_of_registration(self, country_of_registration):
        """Sets the country_of_registration of this GenericCaseAuditDetails.


        :param country_of_registration: The country_of_registration of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._country_of_registration = country_of_registration

    @property
    def imo_number(self):
        """Gets the imo_number of this GenericCaseAuditDetails.  # noqa: E501


        :return: The imo_number of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._imo_number

    @imo_number.setter
    def imo_number(self, imo_number):
        """Sets the imo_number of this GenericCaseAuditDetails.


        :param imo_number: The imo_number of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._imo_number = imo_number

    @property
    def given_name(self):
        """Gets the given_name of this GenericCaseAuditDetails.  # noqa: E501


        :return: The given_name of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this GenericCaseAuditDetails.


        :param given_name: The given_name of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def last_name(self):
        """Gets the last_name of this GenericCaseAuditDetails.  # noqa: E501


        :return: The last_name of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GenericCaseAuditDetails.


        :param last_name: The last_name of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def passport_gender(self):
        """Gets the passport_gender of this GenericCaseAuditDetails.  # noqa: E501


        :return: The passport_gender of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._passport_gender

    @passport_gender.setter
    def passport_gender(self, passport_gender):
        """Sets the passport_gender of this GenericCaseAuditDetails.


        :param passport_gender: The passport_gender of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._passport_gender = passport_gender

    @property
    def issuing_state(self):
        """Gets the issuing_state of this GenericCaseAuditDetails.  # noqa: E501


        :return: The issuing_state of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuing_state

    @issuing_state.setter
    def issuing_state(self, issuing_state):
        """Sets the issuing_state of this GenericCaseAuditDetails.


        :param issuing_state: The issuing_state of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._issuing_state = issuing_state

    @property
    def passport_nationality(self):
        """Gets the passport_nationality of this GenericCaseAuditDetails.  # noqa: E501


        :return: The passport_nationality of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._passport_nationality

    @passport_nationality.setter
    def passport_nationality(self, passport_nationality):
        """Sets the passport_nationality of this GenericCaseAuditDetails.


        :param passport_nationality: The passport_nationality of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._passport_nationality = passport_nationality

    @property
    def passport_date_of_birth(self):
        """Gets the passport_date_of_birth of this GenericCaseAuditDetails.  # noqa: E501


        :return: The passport_date_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: date
        """
        return self._passport_date_of_birth

    @passport_date_of_birth.setter
    def passport_date_of_birth(self, passport_date_of_birth):
        """Sets the passport_date_of_birth of this GenericCaseAuditDetails.


        :param passport_date_of_birth: The passport_date_of_birth of this GenericCaseAuditDetails.  # noqa: E501
        :type: date
        """

        self._passport_date_of_birth = passport_date_of_birth

    @property
    def document_type(self):
        """Gets the document_type of this GenericCaseAuditDetails.  # noqa: E501


        :return: The document_type of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this GenericCaseAuditDetails.


        :param document_type: The document_type of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def id_number(self):
        """Gets the id_number of this GenericCaseAuditDetails.  # noqa: E501


        :return: The id_number of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this GenericCaseAuditDetails.


        :param id_number: The id_number of this GenericCaseAuditDetails.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def custom_fields(self):
        """Gets the custom_fields of this GenericCaseAuditDetails.  # noqa: E501

        Mapping of custom field types to their values  # noqa: E501

        :return: The custom_fields of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this GenericCaseAuditDetails.

        Mapping of custom field types to their values  # noqa: E501

        :param custom_fields: The custom_fields of this GenericCaseAuditDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_fields = custom_fields

    @property
    def expiration_date(self):
        """Gets the expiration_date of this GenericCaseAuditDetails.  # noqa: E501


        :return: The expiration_date of this GenericCaseAuditDetails.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this GenericCaseAuditDetails.


        :param expiration_date: The expiration_date of this GenericCaseAuditDetails.  # noqa: E501
        :type: date
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenericCaseAuditDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
