# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caption': 'str',
        'height': 'int',
        'image_use_code': 'str',
        'uri': 'str',
        'width': 'int'
    }

    attribute_map = {
        'caption': 'caption',
        'height': 'height',
        'image_use_code': 'imageUseCode',
        'uri': 'uri',
        'width': 'width'
    }

    def __init__(self, caption=None, height=None, image_use_code=None, uri=None, width=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._caption = None
        self._height = None
        self._image_use_code = None
        self._uri = None
        self._width = None
        self.discriminator = None

        if caption is not None:
            self.caption = caption
        if height is not None:
            self.height = height
        if image_use_code is not None:
            self.image_use_code = image_use_code
        self.uri = uri
        if width is not None:
            self.width = width

    @property
    def caption(self):
        """Gets the caption of this Image.  # noqa: E501


        :return: The caption of this Image.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Image.


        :param caption: The caption of this Image.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def height(self):
        """Gets the height of this Image.  # noqa: E501


        :return: The height of this Image.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Image.


        :param height: The height of this Image.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def image_use_code(self):
        """Gets the image_use_code of this Image.  # noqa: E501


        :return: The image_use_code of this Image.  # noqa: E501
        :rtype: str
        """
        return self._image_use_code

    @image_use_code.setter
    def image_use_code(self, image_use_code):
        """Sets the image_use_code of this Image.


        :param image_use_code: The image_use_code of this Image.  # noqa: E501
        :type: str
        """

        self._image_use_code = image_use_code

    @property
    def uri(self):
        """Gets the uri of this Image.  # noqa: E501


        :return: The uri of this Image.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Image.


        :param uri: The uri of this Image.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def width(self):
        """Gets the width of this Image.  # noqa: E501


        :return: The width of this Image.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Image.


        :param width: The width of this Image.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
