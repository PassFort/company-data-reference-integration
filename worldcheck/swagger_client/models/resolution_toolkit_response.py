# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resolution_fields import ResolutionFields  # noqa: F401,E501
from swagger_client.models.resolution_rules import ResolutionRules  # noqa: F401,E501


class ResolutionToolkitResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'resolution_fields': 'ResolutionFields',
        'resolution_rules': 'ResolutionRules'
    }

    attribute_map = {
        'group_id': 'groupId',
        'resolution_fields': 'resolutionFields',
        'resolution_rules': 'resolutionRules'
    }

    def __init__(self, group_id=None, resolution_fields=None, resolution_rules=None):  # noqa: E501
        """ResolutionToolkitResponse - a model defined in Swagger"""  # noqa: E501

        self._group_id = None
        self._resolution_fields = None
        self._resolution_rules = None
        self.discriminator = None

        self.group_id = group_id
        if resolution_fields is not None:
            self.resolution_fields = resolution_fields
        if resolution_rules is not None:
            self.resolution_rules = resolution_rules

    @property
    def group_id(self):
        """Gets the group_id of this ResolutionToolkitResponse.  # noqa: E501

        ID of the Group to which this resolution toolkit belongs.  # noqa: E501

        :return: The group_id of this ResolutionToolkitResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ResolutionToolkitResponse.

        ID of the Group to which this resolution toolkit belongs.  # noqa: E501

        :param group_id: The group_id of this ResolutionToolkitResponse.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501
        if group_id is not None and len(group_id) > 255:
            raise ValueError("Invalid value for `group_id`, length must be less than or equal to `255`")  # noqa: E501

        self._group_id = group_id

    @property
    def resolution_fields(self):
        """Gets the resolution_fields of this ResolutionToolkitResponse.  # noqa: E501


        :return: The resolution_fields of this ResolutionToolkitResponse.  # noqa: E501
        :rtype: ResolutionFields
        """
        return self._resolution_fields

    @resolution_fields.setter
    def resolution_fields(self, resolution_fields):
        """Sets the resolution_fields of this ResolutionToolkitResponse.


        :param resolution_fields: The resolution_fields of this ResolutionToolkitResponse.  # noqa: E501
        :type: ResolutionFields
        """

        self._resolution_fields = resolution_fields

    @property
    def resolution_rules(self):
        """Gets the resolution_rules of this ResolutionToolkitResponse.  # noqa: E501


        :return: The resolution_rules of this ResolutionToolkitResponse.  # noqa: E501
        :rtype: ResolutionRules
        """
        return self._resolution_rules

    @resolution_rules.setter
    def resolution_rules(self, resolution_rules):
        """Sets the resolution_rules of this ResolutionToolkitResponse.


        :param resolution_rules: The resolution_rules of this ResolutionToolkitResponse.  # noqa: E501
        :type: ResolutionRules
        """

        self._resolution_rules = resolution_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolutionToolkitResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
