# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_field import AbstractField  # noqa: F401,E501
from swagger_client.models.field_value_type import FieldValueType  # noqa: F401,E501


class FieldDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_id': 'str',
        'field_value_type': 'FieldValueType',
        'field_required': 'bool',
        'label': 'str',
        'reg_exp': 'str'
    }

    attribute_map = {
        'type_id': 'typeId',
        'field_value_type': 'fieldValueType',
        'field_required': 'fieldRequired',
        'label': 'label',
        'reg_exp': 'regExp'
    }

    def __init__(self, type_id=None, field_value_type=None, field_required=False, label=None, reg_exp=None):  # noqa: E501
        """FieldDefinition - a model defined in Swagger"""  # noqa: E501

        self._type_id = None
        self._field_value_type = None
        self._field_required = None
        self._label = None
        self._reg_exp = None
        self.discriminator = None

        self.type_id = type_id
        self.field_value_type = field_value_type
        if field_required is not None:
            self.field_required = field_required
        self.label = label
        if reg_exp is not None:
            self.reg_exp = reg_exp

    @property
    def type_id(self):
        """Gets the type_id of this FieldDefinition.  # noqa: E501

        Type Identifier of this Field  # noqa: E501

        :return: The type_id of this FieldDefinition.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this FieldDefinition.

        Type Identifier of this Field  # noqa: E501

        :param type_id: The type_id of this FieldDefinition.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501
        if type_id is not None and len(type_id) > 255:
            raise ValueError("Invalid value for `type_id`, length must be less than or equal to `255`")  # noqa: E501

        self._type_id = type_id

    @property
    def field_value_type(self):
        """Gets the field_value_type of this FieldDefinition.  # noqa: E501


        :return: The field_value_type of this FieldDefinition.  # noqa: E501
        :rtype: FieldValueType
        """
        return self._field_value_type

    @field_value_type.setter
    def field_value_type(self, field_value_type):
        """Sets the field_value_type of this FieldDefinition.


        :param field_value_type: The field_value_type of this FieldDefinition.  # noqa: E501
        :type: FieldValueType
        """
        if field_value_type is None:
            raise ValueError("Invalid value for `field_value_type`, must not be `None`")  # noqa: E501

        self._field_value_type = field_value_type

    @property
    def field_required(self):
        """Gets the field_required of this FieldDefinition.  # noqa: E501

        Indicates whether this field is required  # noqa: E501

        :return: The field_required of this FieldDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._field_required

    @field_required.setter
    def field_required(self, field_required):
        """Sets the field_required of this FieldDefinition.

        Indicates whether this field is required  # noqa: E501

        :param field_required: The field_required of this FieldDefinition.  # noqa: E501
        :type: bool
        """

        self._field_required = field_required

    @property
    def label(self):
        """Gets the label of this FieldDefinition.  # noqa: E501

        Human-readable label for this field  # noqa: E501

        :return: The label of this FieldDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FieldDefinition.

        Human-readable label for this field  # noqa: E501

        :param label: The label of this FieldDefinition.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if label is not None and len(label) > 1000:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `1000`")  # noqa: E501

        self._label = label

    @property
    def reg_exp(self):
        """Gets the reg_exp of this FieldDefinition.  # noqa: E501

        Optional regular expression which applies to fields where fieldValueType is TEXT  # noqa: E501

        :return: The reg_exp of this FieldDefinition.  # noqa: E501
        :rtype: str
        """
        return self._reg_exp

    @reg_exp.setter
    def reg_exp(self, reg_exp):
        """Sets the reg_exp of this FieldDefinition.

        Optional regular expression which applies to fields where fieldValueType is TEXT  # noqa: E501

        :param reg_exp: The reg_exp of this FieldDefinition.  # noqa: E501
        :type: str
        """
        if reg_exp is not None and len(reg_exp) > 255:
            raise ValueError("Invalid value for `reg_exp`, length must be less than or equal to `255`")  # noqa: E501

        self._reg_exp = reg_exp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
