# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.status_type import StatusType  # noqa: F401,E501


class UserSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'full_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'status': 'StatusType'
    }

    attribute_map = {
        'user_id': 'userId',
        'full_name': 'fullName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'status': 'status'
    }

    def __init__(self, user_id=None, full_name=None, first_name=None, last_name=None, email=None, status=None):  # noqa: E501
        """UserSummary - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._full_name = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._status = None
        self.discriminator = None

        self.user_id = user_id
        self.full_name = full_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.email = email
        self.status = status

    @property
    def user_id(self):
        """Gets the user_id of this UserSummary.  # noqa: E501

        Identifier of the User  # noqa: E501

        :return: The user_id of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSummary.

        Identifier of the User  # noqa: E501

        :param user_id: The user_id of this UserSummary.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501
        if user_id is not None and len(user_id) > 255:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `255`")  # noqa: E501

        self._user_id = user_id

    @property
    def full_name(self):
        """Gets the full_name of this UserSummary.  # noqa: E501

        Full name of the User  # noqa: E501

        :return: The full_name of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserSummary.

        Full name of the User  # noqa: E501

        :param full_name: The full_name of this UserSummary.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501
        if full_name is not None and len(full_name) > 2001:
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `2001`")  # noqa: E501

        self._full_name = full_name

    @property
    def first_name(self):
        """Gets the first_name of this UserSummary.  # noqa: E501

        First name of the User  # noqa: E501

        :return: The first_name of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserSummary.

        First name of the User  # noqa: E501

        :param first_name: The first_name of this UserSummary.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 1000:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `1000`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserSummary.  # noqa: E501

        Last name of the User  # noqa: E501

        :return: The last_name of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserSummary.

        Last name of the User  # noqa: E501

        :param last_name: The last_name of this UserSummary.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 1000:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `1000`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserSummary.  # noqa: E501

        Email address of the User  # noqa: E501

        :return: The email of this UserSummary.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSummary.

        Email address of the User  # noqa: E501

        :param email: The email of this UserSummary.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 1000:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `1000`")  # noqa: E501

        self._email = email

    @property
    def status(self):
        """Gets the status of this UserSummary.  # noqa: E501


        :return: The status of this UserSummary.  # noqa: E501
        :rtype: StatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserSummary.


        :param status: The status of this UserSummary.  # noqa: E501
        :type: StatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
