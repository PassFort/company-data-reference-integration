# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_audit_details import AbstractAuditDetails  # noqa: F401,E501
from swagger_client.models.passport_check_validity_type import PassportCheckValidityType  # noqa: F401,E501


class VerifyPassportAuditDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validity': 'PassportCheckValidityType',
        'mrz_line1': 'str',
        'mrz_line2': 'str',
        'mrz_line3': 'str',
        'given_name': 'str',
        'last_name': 'str',
        'gender': 'str',
        'issuing_state': 'str',
        'nationality': 'str',
        'date_of_birth': 'date',
        'document_type': 'str',
        'id_number': 'str',
        'expiry_date': 'date'
    }

    attribute_map = {
        'validity': 'validity',
        'mrz_line1': 'mrzLine1',
        'mrz_line2': 'mrzLine2',
        'mrz_line3': 'mrzLine3',
        'given_name': 'givenName',
        'last_name': 'lastName',
        'gender': 'gender',
        'issuing_state': 'issuingState',
        'nationality': 'nationality',
        'date_of_birth': 'dateOfBirth',
        'document_type': 'documentType',
        'id_number': 'idNumber',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, validity=None, mrz_line1=None, mrz_line2=None, mrz_line3=None, given_name=None, last_name=None, gender=None, issuing_state=None, nationality=None, date_of_birth=None, document_type=None, id_number=None, expiry_date=None):  # noqa: E501
        """VerifyPassportAuditDetails - a model defined in Swagger"""  # noqa: E501

        self._validity = None
        self._mrz_line1 = None
        self._mrz_line2 = None
        self._mrz_line3 = None
        self._given_name = None
        self._last_name = None
        self._gender = None
        self._issuing_state = None
        self._nationality = None
        self._date_of_birth = None
        self._document_type = None
        self._id_number = None
        self._expiry_date = None
        self.discriminator = None

        self.validity = validity
        self.mrz_line1 = mrz_line1
        self.mrz_line2 = mrz_line2
        self.mrz_line3 = mrz_line3
        self.given_name = given_name
        self.last_name = last_name
        self.gender = gender
        self.issuing_state = issuing_state
        self.nationality = nationality
        self.date_of_birth = date_of_birth
        self.document_type = document_type
        self.id_number = id_number
        self.expiry_date = expiry_date

    @property
    def validity(self):
        """Gets the validity of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The validity of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: PassportCheckValidityType
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this VerifyPassportAuditDetails.


        :param validity: The validity of this VerifyPassportAuditDetails.  # noqa: E501
        :type: PassportCheckValidityType
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

    @property
    def mrz_line1(self):
        """Gets the mrz_line1 of this VerifyPassportAuditDetails.  # noqa: E501

        Line 1 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :return: The mrz_line1 of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._mrz_line1

    @mrz_line1.setter
    def mrz_line1(self, mrz_line1):
        """Sets the mrz_line1 of this VerifyPassportAuditDetails.

        Line 1 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :param mrz_line1: The mrz_line1 of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if mrz_line1 is None:
            raise ValueError("Invalid value for `mrz_line1`, must not be `None`")  # noqa: E501

        self._mrz_line1 = mrz_line1

    @property
    def mrz_line2(self):
        """Gets the mrz_line2 of this VerifyPassportAuditDetails.  # noqa: E501

        Line 2 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :return: The mrz_line2 of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._mrz_line2

    @mrz_line2.setter
    def mrz_line2(self, mrz_line2):
        """Sets the mrz_line2 of this VerifyPassportAuditDetails.

        Line 2 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :param mrz_line2: The mrz_line2 of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if mrz_line2 is None:
            raise ValueError("Invalid value for `mrz_line2`, must not be `None`")  # noqa: E501

        self._mrz_line2 = mrz_line2

    @property
    def mrz_line3(self):
        """Gets the mrz_line3 of this VerifyPassportAuditDetails.  # noqa: E501

        Line 3 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :return: The mrz_line3 of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._mrz_line3

    @mrz_line3.setter
    def mrz_line3(self, mrz_line3):
        """Sets the mrz_line3 of this VerifyPassportAuditDetails.

        Line 3 of the MRZ (Machine Readable Zone) information  # noqa: E501

        :param mrz_line3: The mrz_line3 of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if mrz_line3 is None:
            raise ValueError("Invalid value for `mrz_line3`, must not be `None`")  # noqa: E501

        self._mrz_line3 = mrz_line3

    @property
    def given_name(self):
        """Gets the given_name of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The given_name of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this VerifyPassportAuditDetails.


        :param given_name: The given_name of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def last_name(self):
        """Gets the last_name of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The last_name of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VerifyPassportAuditDetails.


        :param last_name: The last_name of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def gender(self):
        """Gets the gender of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The gender of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this VerifyPassportAuditDetails.


        :param gender: The gender of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def issuing_state(self):
        """Gets the issuing_state of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The issuing_state of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuing_state

    @issuing_state.setter
    def issuing_state(self, issuing_state):
        """Sets the issuing_state of this VerifyPassportAuditDetails.


        :param issuing_state: The issuing_state of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if issuing_state is None:
            raise ValueError("Invalid value for `issuing_state`, must not be `None`")  # noqa: E501

        self._issuing_state = issuing_state

    @property
    def nationality(self):
        """Gets the nationality of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The nationality of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this VerifyPassportAuditDetails.


        :param nationality: The nationality of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501

        self._nationality = nationality

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The date_of_birth of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this VerifyPassportAuditDetails.


        :param date_of_birth: The date_of_birth of this VerifyPassportAuditDetails.  # noqa: E501
        :type: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def document_type(self):
        """Gets the document_type of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The document_type of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this VerifyPassportAuditDetails.


        :param document_type: The document_type of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")  # noqa: E501

        self._document_type = document_type

    @property
    def id_number(self):
        """Gets the id_number of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The id_number of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this VerifyPassportAuditDetails.


        :param id_number: The id_number of this VerifyPassportAuditDetails.  # noqa: E501
        :type: str
        """
        if id_number is None:
            raise ValueError("Invalid value for `id_number`, must not be `None`")  # noqa: E501

        self._id_number = id_number

    @property
    def expiry_date(self):
        """Gets the expiry_date of this VerifyPassportAuditDetails.  # noqa: E501


        :return: The expiry_date of this VerifyPassportAuditDetails.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this VerifyPassportAuditDetails.


        :param expiry_date: The expiry_date of this VerifyPassportAuditDetails.  # noqa: E501
        :type: date
        """
        if expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyPassportAuditDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
