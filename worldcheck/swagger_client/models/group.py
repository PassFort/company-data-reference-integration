# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.status_type import StatusType  # noqa: F401,E501


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parent_id': 'str',
        'name': 'str',
        'has_children': 'bool',
        'children': 'list[Group]',
        'status': 'StatusType'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parentId',
        'name': 'name',
        'has_children': 'hasChildren',
        'children': 'children',
        'status': 'status'
    }

    def __init__(self, id=None, parent_id=None, name=None, has_children=False, children=None, status=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._parent_id = None
        self._name = None
        self._has_children = None
        self._children = None
        self._status = None
        self.discriminator = None

        self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        self.name = name
        if has_children is not None:
            self.has_children = has_children
        if children is not None:
            self.children = children
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        Group ID  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Group ID  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this Group.  # noqa: E501

        Parent Group ID  # noqa: E501

        :return: The parent_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Group.

        Parent Group ID  # noqa: E501

        :param parent_id: The parent_id of this Group.  # noqa: E501
        :type: str
        """
        if parent_id is not None and len(parent_id) > 255:
            raise ValueError("Invalid value for `parent_id`, length must be less than or equal to `255`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        Name for the Group  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Name for the Group  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def has_children(self):
        """Gets the has_children of this Group.  # noqa: E501


        :return: The has_children of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Group.


        :param has_children: The has_children of this Group.  # noqa: E501
        :type: bool
        """

        self._has_children = has_children

    @property
    def children(self):
        """Gets the children of this Group.  # noqa: E501

        Child groups  # noqa: E501

        :return: The children of this Group.  # noqa: E501
        :rtype: list[Group]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Group.

        Child groups  # noqa: E501

        :param children: The children of this Group.  # noqa: E501
        :type: list[Group]
        """

        self._children = children

    @property
    def status(self):
        """Gets the status of this Group.  # noqa: E501


        :return: The status of this Group.  # noqa: E501
        :rtype: StatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Group.


        :param status: The status of this Group.  # noqa: E501
        :type: StatusType
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
