# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.provider import Provider  # noqa: F401,E501
from swagger_client.models.provider_source_status import ProviderSourceStatus  # noqa: F401,E501
from swagger_client.models.provider_source_type import ProviderSourceType  # noqa: F401,E501
from swagger_client.models.subscription_category import SubscriptionCategory  # noqa: F401,E501


class ProviderSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abbreviation': 'str',
        'creation_date': 'datetime',
        'identifier': 'str',
        'import_identifier': 'str',
        'name': 'str',
        'provider': 'Provider',
        'provider_source_status': 'ProviderSourceStatus',
        'region_of_authority': 'str',
        'subscription_category': 'SubscriptionCategory',
        'type': 'ProviderSourceType'
    }

    attribute_map = {
        'abbreviation': 'abbreviation',
        'creation_date': 'creationDate',
        'identifier': 'identifier',
        'import_identifier': 'importIdentifier',
        'name': 'name',
        'provider': 'provider',
        'provider_source_status': 'providerSourceStatus',
        'region_of_authority': 'regionOfAuthority',
        'subscription_category': 'subscriptionCategory',
        'type': 'type'
    }

    def __init__(self, abbreviation=None, creation_date=None, identifier=None, import_identifier=None, name=None, provider=None, provider_source_status=None, region_of_authority=None, subscription_category=None, type=None):  # noqa: E501
        """ProviderSource - a model defined in Swagger"""  # noqa: E501

        self._abbreviation = None
        self._creation_date = None
        self._identifier = None
        self._import_identifier = None
        self._name = None
        self._provider = None
        self._provider_source_status = None
        self._region_of_authority = None
        self._subscription_category = None
        self._type = None
        self.discriminator = None

        self.abbreviation = abbreviation
        if creation_date is not None:
            self.creation_date = creation_date
        self.identifier = identifier
        if import_identifier is not None:
            self.import_identifier = import_identifier
        self.name = name
        if provider is not None:
            self.provider = provider
        self.provider_source_status = provider_source_status
        if region_of_authority is not None:
            self.region_of_authority = region_of_authority
        if subscription_category is not None:
            self.subscription_category = subscription_category
        if type is not None:
            self.type = type

    @property
    def abbreviation(self):
        """Gets the abbreviation of this ProviderSource.  # noqa: E501

        Abbreviated form of this source's `name`.  # noqa: E501

        :return: The abbreviation of this ProviderSource.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this ProviderSource.

        Abbreviated form of this source's `name`.  # noqa: E501

        :param abbreviation: The abbreviation of this ProviderSource.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def creation_date(self):
        """Gets the creation_date of this ProviderSource.  # noqa: E501


        :return: The creation_date of this ProviderSource.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProviderSource.


        :param creation_date: The creation_date of this ProviderSource.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def identifier(self):
        """Gets the identifier of this ProviderSource.  # noqa: E501


        :return: The identifier of this ProviderSource.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ProviderSource.


        :param identifier: The identifier of this ProviderSource.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def import_identifier(self):
        """Gets the import_identifier of this ProviderSource.  # noqa: E501


        :return: The import_identifier of this ProviderSource.  # noqa: E501
        :rtype: str
        """
        return self._import_identifier

    @import_identifier.setter
    def import_identifier(self, import_identifier):
        """Sets the import_identifier of this ProviderSource.


        :param import_identifier: The import_identifier of this ProviderSource.  # noqa: E501
        :type: str
        """

        self._import_identifier = import_identifier

    @property
    def name(self):
        """Gets the name of this ProviderSource.  # noqa: E501

        Full name of this source.  # noqa: E501

        :return: The name of this ProviderSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderSource.

        Full name of this source.  # noqa: E501

        :param name: The name of this ProviderSource.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this ProviderSource.  # noqa: E501

        Provider for this source.  # noqa: E501

        :return: The provider of this ProviderSource.  # noqa: E501
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ProviderSource.

        Provider for this source.  # noqa: E501

        :param provider: The provider of this ProviderSource.  # noqa: E501
        :type: Provider
        """

        self._provider = provider

    @property
    def provider_source_status(self):
        """Gets the provider_source_status of this ProviderSource.  # noqa: E501


        :return: The provider_source_status of this ProviderSource.  # noqa: E501
        :rtype: ProviderSourceStatus
        """
        return self._provider_source_status

    @provider_source_status.setter
    def provider_source_status(self, provider_source_status):
        """Sets the provider_source_status of this ProviderSource.


        :param provider_source_status: The provider_source_status of this ProviderSource.  # noqa: E501
        :type: ProviderSourceStatus
        """
        if provider_source_status is None:
            raise ValueError("Invalid value for `provider_source_status`, must not be `None`")  # noqa: E501

        self._provider_source_status = provider_source_status

    @property
    def region_of_authority(self):
        """Gets the region_of_authority of this ProviderSource.  # noqa: E501


        :return: The region_of_authority of this ProviderSource.  # noqa: E501
        :rtype: str
        """
        return self._region_of_authority

    @region_of_authority.setter
    def region_of_authority(self, region_of_authority):
        """Sets the region_of_authority of this ProviderSource.


        :param region_of_authority: The region_of_authority of this ProviderSource.  # noqa: E501
        :type: str
        """

        self._region_of_authority = region_of_authority

    @property
    def subscription_category(self):
        """Gets the subscription_category of this ProviderSource.  # noqa: E501


        :return: The subscription_category of this ProviderSource.  # noqa: E501
        :rtype: SubscriptionCategory
        """
        return self._subscription_category

    @subscription_category.setter
    def subscription_category(self, subscription_category):
        """Sets the subscription_category of this ProviderSource.


        :param subscription_category: The subscription_category of this ProviderSource.  # noqa: E501
        :type: SubscriptionCategory
        """

        self._subscription_category = subscription_category

    @property
    def type(self):
        """Gets the type of this ProviderSource.  # noqa: E501


        :return: The type of this ProviderSource.  # noqa: E501
        :rtype: ProviderSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProviderSource.


        :param type: The type of this ProviderSource.  # noqa: E501
        :type: ProviderSourceType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
