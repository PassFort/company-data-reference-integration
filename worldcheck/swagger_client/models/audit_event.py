# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_audit_details import AbstractAuditDetails  # noqa: F401,E501
from swagger_client.models.audit_entity_type import AuditEntityType  # noqa: F401,E501
from swagger_client.models.audit_event_action_type import AuditEventActionType  # noqa: F401,E501


class AuditEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object_id': 'str',
        'entity_type': 'AuditEntityType',
        'event_date': 'datetime',
        'action_type': 'AuditEventActionType',
        'actioned_by_user_id': 'str',
        'actioned_by_user_name': 'str',
        'note': 'str',
        'details': 'AbstractAuditDetails'
    }

    attribute_map = {
        'id': 'id',
        'object_id': 'objectId',
        'entity_type': 'entityType',
        'event_date': 'eventDate',
        'action_type': 'actionType',
        'actioned_by_user_id': 'actionedByUserId',
        'actioned_by_user_name': 'actionedByUserName',
        'note': 'note',
        'details': 'details'
    }

    def __init__(self, id=None, object_id=None, entity_type=None, event_date=None, action_type=None, actioned_by_user_id=None, actioned_by_user_name=None, note=None, details=None):  # noqa: E501
        """AuditEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._object_id = None
        self._entity_type = None
        self._event_date = None
        self._action_type = None
        self._actioned_by_user_id = None
        self._actioned_by_user_name = None
        self._note = None
        self._details = None
        self.discriminator = None

        self.id = id
        self.object_id = object_id
        self.entity_type = entity_type
        self.event_date = event_date
        self.action_type = action_type
        self.actioned_by_user_id = actioned_by_user_id
        self.actioned_by_user_name = actioned_by_user_name
        if note is not None:
            self.note = note
        self.details = details

    @property
    def id(self):
        """Gets the id of this AuditEvent.  # noqa: E501

        Identifier for this audit event  # noqa: E501

        :return: The id of this AuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditEvent.

        Identifier for this audit event  # noqa: E501

        :param id: The id of this AuditEvent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501

        self._id = id

    @property
    def object_id(self):
        """Gets the object_id of this AuditEvent.  # noqa: E501

        Identifier of the entity for which this audit event was created  # noqa: E501

        :return: The object_id of this AuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this AuditEvent.

        Identifier of the entity for which this audit event was created  # noqa: E501

        :param object_id: The object_id of this AuditEvent.  # noqa: E501
        :type: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501
        if object_id is not None and len(object_id) > 255:
            raise ValueError("Invalid value for `object_id`, length must be less than or equal to `255`")  # noqa: E501

        self._object_id = object_id

    @property
    def entity_type(self):
        """Gets the entity_type of this AuditEvent.  # noqa: E501


        :return: The entity_type of this AuditEvent.  # noqa: E501
        :rtype: AuditEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this AuditEvent.


        :param entity_type: The entity_type of this AuditEvent.  # noqa: E501
        :type: AuditEntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def event_date(self):
        """Gets the event_date of this AuditEvent.  # noqa: E501

        Creation date and time of this audit event in ISO 8601 format excluding Week and Ordinal dates.  # noqa: E501

        :return: The event_date of this AuditEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this AuditEvent.

        Creation date and time of this audit event in ISO 8601 format excluding Week and Ordinal dates.  # noqa: E501

        :param event_date: The event_date of this AuditEvent.  # noqa: E501
        :type: datetime
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def action_type(self):
        """Gets the action_type of this AuditEvent.  # noqa: E501


        :return: The action_type of this AuditEvent.  # noqa: E501
        :rtype: AuditEventActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this AuditEvent.


        :param action_type: The action_type of this AuditEvent.  # noqa: E501
        :type: AuditEventActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def actioned_by_user_id(self):
        """Gets the actioned_by_user_id of this AuditEvent.  # noqa: E501

        Identifier of the User who created this audit event  # noqa: E501

        :return: The actioned_by_user_id of this AuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._actioned_by_user_id

    @actioned_by_user_id.setter
    def actioned_by_user_id(self, actioned_by_user_id):
        """Sets the actioned_by_user_id of this AuditEvent.

        Identifier of the User who created this audit event  # noqa: E501

        :param actioned_by_user_id: The actioned_by_user_id of this AuditEvent.  # noqa: E501
        :type: str
        """
        if actioned_by_user_id is None:
            raise ValueError("Invalid value for `actioned_by_user_id`, must not be `None`")  # noqa: E501
        if actioned_by_user_id is not None and len(actioned_by_user_id) > 255:
            raise ValueError("Invalid value for `actioned_by_user_id`, length must be less than or equal to `255`")  # noqa: E501

        self._actioned_by_user_id = actioned_by_user_id

    @property
    def actioned_by_user_name(self):
        """Gets the actioned_by_user_name of this AuditEvent.  # noqa: E501

        Full name of the User who created this audit event  # noqa: E501

        :return: The actioned_by_user_name of this AuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._actioned_by_user_name

    @actioned_by_user_name.setter
    def actioned_by_user_name(self, actioned_by_user_name):
        """Sets the actioned_by_user_name of this AuditEvent.

        Full name of the User who created this audit event  # noqa: E501

        :param actioned_by_user_name: The actioned_by_user_name of this AuditEvent.  # noqa: E501
        :type: str
        """
        if actioned_by_user_name is None:
            raise ValueError("Invalid value for `actioned_by_user_name`, must not be `None`")  # noqa: E501
        if actioned_by_user_name is not None and len(actioned_by_user_name) > 2001:
            raise ValueError("Invalid value for `actioned_by_user_name`, length must be less than or equal to `2001`")  # noqa: E501

        self._actioned_by_user_name = actioned_by_user_name

    @property
    def note(self):
        """Gets the note of this AuditEvent.  # noqa: E501

        a comment added by the user  # noqa: E501

        :return: The note of this AuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AuditEvent.

        a comment added by the user  # noqa: E501

        :param note: The note of this AuditEvent.  # noqa: E501
        :type: str
        """
        if note is not None and len(note) > 1000:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `1000`")  # noqa: E501

        self._note = note

    @property
    def details(self):
        """Gets the details of this AuditEvent.  # noqa: E501


        :return: The details of this AuditEvent.  # noqa: E501
        :rtype: AbstractAuditDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AuditEvent.


        :param details: The details of this AuditEvent.  # noqa: E501
        :type: AbstractAuditDetails
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
