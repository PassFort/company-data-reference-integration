# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_strength import MatchStrength  # noqa: F401,E501
from swagger_client.models.name_type import NameType  # noqa: F401,E501
from swagger_client.models.resolution import Resolution  # noqa: F401,E501
from swagger_client.models.review import Review  # noqa: F401,E501
from swagger_client.models.secondary_field_result import SecondaryFieldResult  # noqa: F401,E501


class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result_id': 'str',
        'reference_id': 'str',
        'match_strength': 'MatchStrength',
        'matched_term': 'str',
        'submitted_term': 'str',
        'matched_name_type': 'NameType',
        'secondary_field_results': 'list[SecondaryFieldResult]',
        'resolution': 'Resolution',
        'result_review': 'Review',
        'sources': 'list[str]',
        'categories': 'list[str]',
        'creation_date': 'datetime',
        'modification_date': 'datetime'
    }

    attribute_map = {
        'result_id': 'resultId',
        'reference_id': 'referenceId',
        'match_strength': 'matchStrength',
        'matched_term': 'matchedTerm',
        'submitted_term': 'submittedTerm',
        'matched_name_type': 'matchedNameType',
        'secondary_field_results': 'secondaryFieldResults',
        'resolution': 'resolution',
        'result_review': 'resultReview',
        'sources': 'sources',
        'categories': 'categories',
        'creation_date': 'creationDate',
        'modification_date': 'modificationDate'
    }

    def __init__(self, result_id=None, reference_id=None, match_strength=None, matched_term=None, submitted_term=None, matched_name_type=None, secondary_field_results=None, resolution=None, result_review=None, sources=None, categories=None, creation_date=None, modification_date=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501

        self._result_id = None
        self._reference_id = None
        self._match_strength = None
        self._matched_term = None
        self._submitted_term = None
        self._matched_name_type = None
        self._secondary_field_results = None
        self._resolution = None
        self._result_review = None
        self._sources = None
        self._categories = None
        self._creation_date = None
        self._modification_date = None
        self.discriminator = None

        self.result_id = result_id
        self.reference_id = reference_id
        if match_strength is not None:
            self.match_strength = match_strength
        if matched_term is not None:
            self.matched_term = matched_term
        if submitted_term is not None:
            self.submitted_term = submitted_term
        if matched_name_type is not None:
            self.matched_name_type = matched_name_type
        if secondary_field_results is not None:
            self.secondary_field_results = secondary_field_results
        if resolution is not None:
            self.resolution = resolution
        if result_review is not None:
            self.result_review = result_review
        if sources is not None:
            self.sources = sources
        if categories is not None:
            self.categories = categories
        if creation_date is not None:
            self.creation_date = creation_date
        if modification_date is not None:
            self.modification_date = modification_date

    @property
    def result_id(self):
        """Gets the result_id of this Result.  # noqa: E501

        Unique ID for this Result.  # noqa: E501

        :return: The result_id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this Result.

        Unique ID for this Result.  # noqa: E501

        :param result_id: The result_id of this Result.  # noqa: E501
        :type: str
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")  # noqa: E501
        if result_id is not None and len(result_id) > 255:
            raise ValueError("Invalid value for `result_id`, length must be less than or equal to `255`")  # noqa: E501

        self._result_id = result_id

    @property
    def reference_id(self):
        """Gets the reference_id of this Result.  # noqa: E501

        Identifier of the [Entity] (#Entity) found by this Result.  # noqa: E501

        :return: The reference_id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Result.

        Identifier of the [Entity] (#Entity) found by this Result.  # noqa: E501

        :param reference_id: The reference_id of this Result.  # noqa: E501
        :type: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")  # noqa: E501
        if reference_id is not None and len(reference_id) > 255:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `255`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def match_strength(self):
        """Gets the match_strength of this Result.  # noqa: E501


        :return: The match_strength of this Result.  # noqa: E501
        :rtype: MatchStrength
        """
        return self._match_strength

    @match_strength.setter
    def match_strength(self, match_strength):
        """Sets the match_strength of this Result.


        :param match_strength: The match_strength of this Result.  # noqa: E501
        :type: MatchStrength
        """

        self._match_strength = match_strength

    @property
    def matched_term(self):
        """Gets the matched_term of this Result.  # noqa: E501

        Matched name value on the referenced [Entity] (#Entity).  # noqa: E501

        :return: The matched_term of this Result.  # noqa: E501
        :rtype: str
        """
        return self._matched_term

    @matched_term.setter
    def matched_term(self, matched_term):
        """Sets the matched_term of this Result.

        Matched name value on the referenced [Entity] (#Entity).  # noqa: E501

        :param matched_term: The matched_term of this Result.  # noqa: E501
        :type: str
        """
        if matched_term is not None and len(matched_term) > 1000:
            raise ValueError("Invalid value for `matched_term`, length must be less than or equal to `1000`")  # noqa: E501

        self._matched_term = matched_term

    @property
    def submitted_term(self):
        """Gets the submitted_term of this Result.  # noqa: E501

        Submitted name value on the [Case] (#Case).  # noqa: E501

        :return: The submitted_term of this Result.  # noqa: E501
        :rtype: str
        """
        return self._submitted_term

    @submitted_term.setter
    def submitted_term(self, submitted_term):
        """Sets the submitted_term of this Result.

        Submitted name value on the [Case] (#Case).  # noqa: E501

        :param submitted_term: The submitted_term of this Result.  # noqa: E501
        :type: str
        """
        if submitted_term is not None and len(submitted_term) > 1000:
            raise ValueError("Invalid value for `submitted_term`, length must be less than or equal to `1000`")  # noqa: E501

        self._submitted_term = submitted_term

    @property
    def matched_name_type(self):
        """Gets the matched_name_type of this Result.  # noqa: E501


        :return: The matched_name_type of this Result.  # noqa: E501
        :rtype: NameType
        """
        return self._matched_name_type

    @matched_name_type.setter
    def matched_name_type(self, matched_name_type):
        """Sets the matched_name_type of this Result.


        :param matched_name_type: The matched_name_type of this Result.  # noqa: E501
        :type: NameType
        """

        self._matched_name_type = matched_name_type

    @property
    def secondary_field_results(self):
        """Gets the secondary_field_results of this Result.  # noqa: E501

        Match results for Case secondary fields.  # noqa: E501

        :return: The secondary_field_results of this Result.  # noqa: E501
        :rtype: list[SecondaryFieldResult]
        """
        return self._secondary_field_results

    @secondary_field_results.setter
    def secondary_field_results(self, secondary_field_results):
        """Sets the secondary_field_results of this Result.

        Match results for Case secondary fields.  # noqa: E501

        :param secondary_field_results: The secondary_field_results of this Result.  # noqa: E501
        :type: list[SecondaryFieldResult]
        """

        self._secondary_field_results = secondary_field_results

    @property
    def resolution(self):
        """Gets the resolution of this Result.  # noqa: E501


        :return: The resolution of this Result.  # noqa: E501
        :rtype: Resolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Result.


        :param resolution: The resolution of this Result.  # noqa: E501
        :type: Resolution
        """

        self._resolution = resolution

    @property
    def result_review(self):
        """Gets the result_review of this Result.  # noqa: E501


        :return: The result_review of this Result.  # noqa: E501
        :rtype: Review
        """
        return self._result_review

    @result_review.setter
    def result_review(self, result_review):
        """Sets the result_review of this Result.


        :param result_review: The result_review of this Result.  # noqa: E501
        :type: Review
        """

        self._result_review = result_review

    @property
    def sources(self):
        """Gets the sources of this Result.  # noqa: E501

        Set of [ProviderSource](#ProviderSource)s, each of which contains this Result's Entity and was used to screen the Case when this Result was last found.   # noqa: E501

        :return: The sources of this Result.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Result.

        Set of [ProviderSource](#ProviderSource)s, each of which contains this Result's Entity and was used to screen the Case when this Result was last found.   # noqa: E501

        :param sources: The sources of this Result.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def categories(self):
        """Gets the categories of this Result.  # noqa: E501

        Set of [ProviderSourceTypeCategory] (#ProviderSourceTypeCategoryDetail) names of this Result's sources.   # noqa: E501

        :return: The categories of this Result.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Result.

        Set of [ProviderSourceTypeCategory] (#ProviderSourceTypeCategoryDetail) names of this Result's sources.   # noqa: E501

        :param categories: The categories of this Result.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def creation_date(self):
        """Gets the creation_date of this Result.  # noqa: E501

        Result creation date and time.  # noqa: E501

        :return: The creation_date of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Result.

        Result creation date and time.  # noqa: E501

        :param creation_date: The creation_date of this Result.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def modification_date(self):
        """Gets the modification_date of this Result.  # noqa: E501

        Result modification date and time.  # noqa: E501

        :return: The modification_date of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this Result.

        Result modification date and time.  # noqa: E501

        :param modification_date: The modification_date of this Result.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
