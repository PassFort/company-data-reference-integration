# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.address import Address  # noqa: F401,E501
from swagger_client.models.event_type import EventType  # noqa: F401,E501


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'Address',
        'alleged_addresses': 'list[Address]',
        'day': 'int',
        'full_date': 'str',
        'month': 'int',
        'type': 'EventType',
        'year': 'int'
    }

    attribute_map = {
        'address': 'address',
        'alleged_addresses': 'allegedAddresses',
        'day': 'day',
        'full_date': 'fullDate',
        'month': 'month',
        'type': 'type',
        'year': 'year'
    }

    def __init__(self, address=None, alleged_addresses=None, day=None, full_date=None, month=None, type=None, year=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._alleged_addresses = None
        self._day = None
        self._full_date = None
        self._month = None
        self._type = None
        self._year = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if alleged_addresses is not None:
            self.alleged_addresses = alleged_addresses
        if day is not None:
            self.day = day
        if full_date is not None:
            self.full_date = full_date
        if month is not None:
            self.month = month
        if type is not None:
            self.type = type
        if year is not None:
            self.year = year

    @property
    def address(self):
        """Gets the address of this Event.  # noqa: E501


        :return: The address of this Event.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Event.


        :param address: The address of this Event.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def alleged_addresses(self):
        """Gets the alleged_addresses of this Event.  # noqa: E501


        :return: The alleged_addresses of this Event.  # noqa: E501
        :rtype: list[Address]
        """
        return self._alleged_addresses

    @alleged_addresses.setter
    def alleged_addresses(self, alleged_addresses):
        """Sets the alleged_addresses of this Event.


        :param alleged_addresses: The alleged_addresses of this Event.  # noqa: E501
        :type: list[Address]
        """

        self._alleged_addresses = alleged_addresses

    @property
    def day(self):
        """Gets the day of this Event.  # noqa: E501


        :return: The day of this Event.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Event.


        :param day: The day of this Event.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def full_date(self):
        """Gets the full_date of this Event.  # noqa: E501


        :return: The full_date of this Event.  # noqa: E501
        :rtype: str
        """
        return self._full_date

    @full_date.setter
    def full_date(self, full_date):
        """Sets the full_date of this Event.


        :param full_date: The full_date of this Event.  # noqa: E501
        :type: str
        """

        self._full_date = full_date

    @property
    def month(self):
        """Gets the month of this Event.  # noqa: E501


        :return: The month of this Event.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Event.


        :param month: The month of this Event.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: EventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: EventType
        """

        self._type = type

    @property
    def year(self):
        """Gets the year of this Event.  # noqa: E501


        :return: The year of this Event.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Event.


        :param year: The year of this Event.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
