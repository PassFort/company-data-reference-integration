# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OngoingScreeningUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'case_system_id': 'str',
        'update_date': 'datetime',
        'number_of_new_results': 'int',
        'number_of_updated_results': 'int'
    }

    attribute_map = {
        'case_system_id': 'caseSystemId',
        'update_date': 'updateDate',
        'number_of_new_results': 'numberOfNewResults',
        'number_of_updated_results': 'numberOfUpdatedResults'
    }

    def __init__(self, case_system_id=None, update_date=None, number_of_new_results=None, number_of_updated_results=None):  # noqa: E501
        """OngoingScreeningUpdate - a model defined in Swagger"""  # noqa: E501

        self._case_system_id = None
        self._update_date = None
        self._number_of_new_results = None
        self._number_of_updated_results = None
        self.discriminator = None

        self.case_system_id = case_system_id
        self.update_date = update_date
        if number_of_new_results is not None:
            self.number_of_new_results = number_of_new_results
        if number_of_updated_results is not None:
            self.number_of_updated_results = number_of_updated_results

    @property
    def case_system_id(self):
        """Gets the case_system_id of this OngoingScreeningUpdate.  # noqa: E501

        System generated ID for the Case  # noqa: E501

        :return: The case_system_id of this OngoingScreeningUpdate.  # noqa: E501
        :rtype: str
        """
        return self._case_system_id

    @case_system_id.setter
    def case_system_id(self, case_system_id):
        """Sets the case_system_id of this OngoingScreeningUpdate.

        System generated ID for the Case  # noqa: E501

        :param case_system_id: The case_system_id of this OngoingScreeningUpdate.  # noqa: E501
        :type: str
        """
        if case_system_id is None:
            raise ValueError("Invalid value for `case_system_id`, must not be `None`")  # noqa: E501
        if case_system_id is not None and len(case_system_id) > 255:
            raise ValueError("Invalid value for `case_system_id`, length must be less than or equal to `255`")  # noqa: E501

        self._case_system_id = case_system_id

    @property
    def update_date(self):
        """Gets the update_date of this OngoingScreeningUpdate.  # noqa: E501

        Creation date and time of this ongoingScreeningUpdate in ISO 8601 format excluding Week and Ordinal dates.  # noqa: E501

        :return: The update_date of this OngoingScreeningUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this OngoingScreeningUpdate.

        Creation date and time of this ongoingScreeningUpdate in ISO 8601 format excluding Week and Ordinal dates.  # noqa: E501

        :param update_date: The update_date of this OngoingScreeningUpdate.  # noqa: E501
        :type: datetime
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")  # noqa: E501

        self._update_date = update_date

    @property
    def number_of_new_results(self):
        """Gets the number_of_new_results of this OngoingScreeningUpdate.  # noqa: E501

        Number of new results added to the Case identified by caseSystemId during the ongoing screening operation that this update belongs to.   # noqa: E501

        :return: The number_of_new_results of this OngoingScreeningUpdate.  # noqa: E501
        :rtype: int
        """
        return self._number_of_new_results

    @number_of_new_results.setter
    def number_of_new_results(self, number_of_new_results):
        """Sets the number_of_new_results of this OngoingScreeningUpdate.

        Number of new results added to the Case identified by caseSystemId during the ongoing screening operation that this update belongs to.   # noqa: E501

        :param number_of_new_results: The number_of_new_results of this OngoingScreeningUpdate.  # noqa: E501
        :type: int
        """

        self._number_of_new_results = number_of_new_results

    @property
    def number_of_updated_results(self):
        """Gets the number_of_updated_results of this OngoingScreeningUpdate.  # noqa: E501

        Number of updates in the existing results of the Case identified by caseSystemId found during the ongoing screening operation that this update belongs to.   # noqa: E501

        :return: The number_of_updated_results of this OngoingScreeningUpdate.  # noqa: E501
        :rtype: int
        """
        return self._number_of_updated_results

    @number_of_updated_results.setter
    def number_of_updated_results(self, number_of_updated_results):
        """Sets the number_of_updated_results of this OngoingScreeningUpdate.

        Number of updates in the existing results of the Case identified by caseSystemId found during the ongoing screening operation that this update belongs to.   # noqa: E501

        :param number_of_updated_results: The number_of_updated_results of this OngoingScreeningUpdate.  # noqa: E501
        :type: int
        """

        self._number_of_updated_results = number_of_updated_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OngoingScreeningUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
