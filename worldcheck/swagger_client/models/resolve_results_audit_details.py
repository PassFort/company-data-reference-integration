# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_audit_details import AbstractAuditDetails  # noqa: F401,E501
from swagger_client.models.result_detail import ResultDetail  # noqa: F401,E501


class ResolveResultsAuditDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result_details': 'list[ResultDetail]',
        'remark': 'str',
        'status': 'str',
        'risk': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'result_details': 'resultDetails',
        'remark': 'remark',
        'status': 'status',
        'risk': 'risk',
        'reason': 'reason'
    }

    def __init__(self, result_details=None, remark=None, status=None, risk=None, reason=None):  # noqa: E501
        """ResolveResultsAuditDetails - a model defined in Swagger"""  # noqa: E501

        self._result_details = None
        self._remark = None
        self._status = None
        self._risk = None
        self._reason = None
        self.discriminator = None

        self.result_details = result_details
        self.remark = remark
        self.status = status
        self.risk = risk
        self.reason = reason

    @property
    def result_details(self):
        """Gets the result_details of this ResolveResultsAuditDetails.  # noqa: E501


        :return: The result_details of this ResolveResultsAuditDetails.  # noqa: E501
        :rtype: list[ResultDetail]
        """
        return self._result_details

    @result_details.setter
    def result_details(self, result_details):
        """Sets the result_details of this ResolveResultsAuditDetails.


        :param result_details: The result_details of this ResolveResultsAuditDetails.  # noqa: E501
        :type: list[ResultDetail]
        """
        if result_details is None:
            raise ValueError("Invalid value for `result_details`, must not be `None`")  # noqa: E501

        self._result_details = result_details

    @property
    def remark(self):
        """Gets the remark of this ResolveResultsAuditDetails.  # noqa: E501

        Remark describing the resolution  # noqa: E501

        :return: The remark of this ResolveResultsAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this ResolveResultsAuditDetails.

        Remark describing the resolution  # noqa: E501

        :param remark: The remark of this ResolveResultsAuditDetails.  # noqa: E501
        :type: str
        """
        if remark is None:
            raise ValueError("Invalid value for `remark`, must not be `None`")  # noqa: E501

        self._remark = remark

    @property
    def status(self):
        """Gets the status of this ResolveResultsAuditDetails.  # noqa: E501

        Status of the resolution  # noqa: E501

        :return: The status of this ResolveResultsAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResolveResultsAuditDetails.

        Status of the resolution  # noqa: E501

        :param status: The status of this ResolveResultsAuditDetails.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def risk(self):
        """Gets the risk of this ResolveResultsAuditDetails.  # noqa: E501

        Risk of the resolution  # noqa: E501

        :return: The risk of this ResolveResultsAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ResolveResultsAuditDetails.

        Risk of the resolution  # noqa: E501

        :param risk: The risk of this ResolveResultsAuditDetails.  # noqa: E501
        :type: str
        """
        if risk is None:
            raise ValueError("Invalid value for `risk`, must not be `None`")  # noqa: E501

        self._risk = risk

    @property
    def reason(self):
        """Gets the reason of this ResolveResultsAuditDetails.  # noqa: E501

        Comments on the resolution  # noqa: E501

        :return: The reason of this ResolveResultsAuditDetails.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ResolveResultsAuditDetails.

        Comments on the resolution  # noqa: E501

        :param reason: The reason of this ResolveResultsAuditDetails.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolveResultsAuditDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
