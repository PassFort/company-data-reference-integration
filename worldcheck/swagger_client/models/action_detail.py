# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.file import File  # noqa: F401,E501
from swagger_client.models.profile_action_type import ProfileActionType  # noqa: F401,E501
from swagger_client.models.provider_source import ProviderSource  # noqa: F401,E501


class ActionDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'str',
        'action_type': 'ProfileActionType',
        'comment': 'str',
        'end_date': 'datetime',
        'files': 'list[File]',
        'publication_type': 'str',
        'published': 'str',
        'reference': 'str',
        'source': 'ProviderSource',
        'start_date': 'datetime',
        'text': 'str',
        'title': 'str'
    }

    attribute_map = {
        'action_id': 'actionId',
        'action_type': 'actionType',
        'comment': 'comment',
        'end_date': 'endDate',
        'files': 'files',
        'publication_type': 'publicationType',
        'published': 'published',
        'reference': 'reference',
        'source': 'source',
        'start_date': 'startDate',
        'text': 'text',
        'title': 'title'
    }

    def __init__(self, action_id=None, action_type=None, comment=None, end_date=None, files=None, publication_type=None, published=None, reference=None, source=None, start_date=None, text=None, title=None):  # noqa: E501
        """ActionDetail - a model defined in Swagger"""  # noqa: E501

        self._action_id = None
        self._action_type = None
        self._comment = None
        self._end_date = None
        self._files = None
        self._publication_type = None
        self._published = None
        self._reference = None
        self._source = None
        self._start_date = None
        self._text = None
        self._title = None
        self.discriminator = None

        if action_id is not None:
            self.action_id = action_id
        if action_type is not None:
            self.action_type = action_type
        if comment is not None:
            self.comment = comment
        if end_date is not None:
            self.end_date = end_date
        if files is not None:
            self.files = files
        if publication_type is not None:
            self.publication_type = publication_type
        if published is not None:
            self.published = published
        if reference is not None:
            self.reference = reference
        if source is not None:
            self.source = source
        if start_date is not None:
            self.start_date = start_date
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title

    @property
    def action_id(self):
        """Gets the action_id of this ActionDetail.  # noqa: E501


        :return: The action_id of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionDetail.


        :param action_id: The action_id of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    @property
    def action_type(self):
        """Gets the action_type of this ActionDetail.  # noqa: E501


        :return: The action_type of this ActionDetail.  # noqa: E501
        :rtype: ProfileActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionDetail.


        :param action_type: The action_type of this ActionDetail.  # noqa: E501
        :type: ProfileActionType
        """

        self._action_type = action_type

    @property
    def comment(self):
        """Gets the comment of this ActionDetail.  # noqa: E501


        :return: The comment of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ActionDetail.


        :param comment: The comment of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def end_date(self):
        """Gets the end_date of this ActionDetail.  # noqa: E501


        :return: The end_date of this ActionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ActionDetail.


        :param end_date: The end_date of this ActionDetail.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def files(self):
        """Gets the files of this ActionDetail.  # noqa: E501


        :return: The files of this ActionDetail.  # noqa: E501
        :rtype: list[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ActionDetail.


        :param files: The files of this ActionDetail.  # noqa: E501
        :type: list[File]
        """

        self._files = files

    @property
    def publication_type(self):
        """Gets the publication_type of this ActionDetail.  # noqa: E501


        :return: The publication_type of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._publication_type

    @publication_type.setter
    def publication_type(self, publication_type):
        """Sets the publication_type of this ActionDetail.


        :param publication_type: The publication_type of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._publication_type = publication_type

    @property
    def published(self):
        """Gets the published of this ActionDetail.  # noqa: E501


        :return: The published of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this ActionDetail.


        :param published: The published of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._published = published

    @property
    def reference(self):
        """Gets the reference of this ActionDetail.  # noqa: E501


        :return: The reference of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ActionDetail.


        :param reference: The reference of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def source(self):
        """Gets the source of this ActionDetail.  # noqa: E501


        :return: The source of this ActionDetail.  # noqa: E501
        :rtype: ProviderSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ActionDetail.


        :param source: The source of this ActionDetail.  # noqa: E501
        :type: ProviderSource
        """

        self._source = source

    @property
    def start_date(self):
        """Gets the start_date of this ActionDetail.  # noqa: E501


        :return: The start_date of this ActionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ActionDetail.


        :param start_date: The start_date of this ActionDetail.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def text(self):
        """Gets the text of this ActionDetail.  # noqa: E501


        :return: The text of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ActionDetail.


        :param text: The text of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this ActionDetail.  # noqa: E501


        :return: The title of this ActionDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActionDetail.


        :param title: The title of this ActionDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
