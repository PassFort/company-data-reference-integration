# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatusRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reasons': 'list[str]',
        'remark_required': 'bool',
        'reason_required': 'bool',
        'risks': 'list[str]'
    }

    attribute_map = {
        'reasons': 'reasons',
        'remark_required': 'remarkRequired',
        'reason_required': 'reasonRequired',
        'risks': 'risks'
    }

    def __init__(self, reasons=None, remark_required=None, reason_required=None, risks=None):  # noqa: E501
        """StatusRule - a model defined in Swagger"""  # noqa: E501

        self._reasons = None
        self._remark_required = None
        self._reason_required = None
        self._risks = None
        self.discriminator = None

        self.reasons = reasons
        self.remark_required = remark_required
        self.reason_required = reason_required
        self.risks = risks

    @property
    def reasons(self):
        """Gets the reasons of this StatusRule.  # noqa: E501

        The IDs for the Reasons that can be used when resolving a Result with a specific Status.  # noqa: E501

        :return: The reasons of this StatusRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this StatusRule.

        The IDs for the Reasons that can be used when resolving a Result with a specific Status.  # noqa: E501

        :param reasons: The reasons of this StatusRule.  # noqa: E501
        :type: list[str]
        """
        if reasons is None:
            raise ValueError("Invalid value for `reasons`, must not be `None`")  # noqa: E501

        self._reasons = reasons

    @property
    def remark_required(self):
        """Gets the remark_required of this StatusRule.  # noqa: E501

        Flag indicating whether a remark is required when resolving a Result with a specific Status.  # noqa: E501

        :return: The remark_required of this StatusRule.  # noqa: E501
        :rtype: bool
        """
        return self._remark_required

    @remark_required.setter
    def remark_required(self, remark_required):
        """Sets the remark_required of this StatusRule.

        Flag indicating whether a remark is required when resolving a Result with a specific Status.  # noqa: E501

        :param remark_required: The remark_required of this StatusRule.  # noqa: E501
        :type: bool
        """
        if remark_required is None:
            raise ValueError("Invalid value for `remark_required`, must not be `None`")  # noqa: E501

        self._remark_required = remark_required

    @property
    def reason_required(self):
        """Gets the reason_required of this StatusRule.  # noqa: E501

        Flag indicating whether a reason is required when resolving a Result with a specific Status.  # noqa: E501

        :return: The reason_required of this StatusRule.  # noqa: E501
        :rtype: bool
        """
        return self._reason_required

    @reason_required.setter
    def reason_required(self, reason_required):
        """Sets the reason_required of this StatusRule.

        Flag indicating whether a reason is required when resolving a Result with a specific Status.  # noqa: E501

        :param reason_required: The reason_required of this StatusRule.  # noqa: E501
        :type: bool
        """
        if reason_required is None:
            raise ValueError("Invalid value for `reason_required`, must not be `None`")  # noqa: E501

        self._reason_required = reason_required

    @property
    def risks(self):
        """Gets the risks of this StatusRule.  # noqa: E501

        The IDs for the Risks that can be used when resolving a Result with a specific Status.  # noqa: E501

        :return: The risks of this StatusRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this StatusRule.

        The IDs for the Risks that can be used when resolving a Result with a specific Status.  # noqa: E501

        :param risks: The risks of this StatusRule.  # noqa: E501
        :type: list[str]
        """
        if risks is None:
            raise ValueError("Invalid value for `risks`, must not be `None`")  # noqa: E501

        self._risks = risks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
