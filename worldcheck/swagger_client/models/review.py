# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Review(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'review_required': 'bool',
        'review_required_date': 'datetime',
        'review_remark': 'str',
        'review_date': 'datetime'
    }

    attribute_map = {
        'review_required': 'reviewRequired',
        'review_required_date': 'reviewRequiredDate',
        'review_remark': 'reviewRemark',
        'review_date': 'reviewDate'
    }

    def __init__(self, review_required=None, review_required_date=None, review_remark=None, review_date=None):  # noqa: E501
        """Review - a model defined in Swagger"""  # noqa: E501

        self._review_required = None
        self._review_required_date = None
        self._review_remark = None
        self._review_date = None
        self.discriminator = None

        if review_required is not None:
            self.review_required = review_required
        if review_required_date is not None:
            self.review_required_date = review_required_date
        if review_remark is not None:
            self.review_remark = review_remark
        if review_date is not None:
            self.review_date = review_date

    @property
    def review_required(self):
        """Gets the review_required of this Review.  # noqa: E501

        Flag to indicate Review Required after re-screening the CASE for this result.  # noqa: E501

        :return: The review_required of this Review.  # noqa: E501
        :rtype: bool
        """
        return self._review_required

    @review_required.setter
    def review_required(self, review_required):
        """Sets the review_required of this Review.

        Flag to indicate Review Required after re-screening the CASE for this result.  # noqa: E501

        :param review_required: The review_required of this Review.  # noqa: E501
        :type: bool
        """

        self._review_required = review_required

    @property
    def review_required_date(self):
        """Gets the review_required_date of this Review.  # noqa: E501

        Represents the date and time when this Result was last flagged for review.  # noqa: E501

        :return: The review_required_date of this Review.  # noqa: E501
        :rtype: datetime
        """
        return self._review_required_date

    @review_required_date.setter
    def review_required_date(self, review_required_date):
        """Sets the review_required_date of this Review.

        Represents the date and time when this Result was last flagged for review.  # noqa: E501

        :param review_required_date: The review_required_date of this Review.  # noqa: E501
        :type: datetime
        """

        self._review_required_date = review_required_date

    @property
    def review_remark(self):
        """Gets the review_remark of this Review.  # noqa: E501

        Review remark added when reviewing this Result.  # noqa: E501

        :return: The review_remark of this Review.  # noqa: E501
        :rtype: str
        """
        return self._review_remark

    @review_remark.setter
    def review_remark(self, review_remark):
        """Sets the review_remark of this Review.

        Review remark added when reviewing this Result.  # noqa: E501

        :param review_remark: The review_remark of this Review.  # noqa: E501
        :type: str
        """
        if review_remark is not None and len(review_remark) > 2000:
            raise ValueError("Invalid value for `review_remark`, length must be less than or equal to `2000`")  # noqa: E501

        self._review_remark = review_remark

    @property
    def review_date(self):
        """Gets the review_date of this Review.  # noqa: E501

        Represents the date and time when this Result was last reviewed.  # noqa: E501

        :return: The review_date of this Review.  # noqa: E501
        :rtype: datetime
        """
        return self._review_date

    @review_date.setter
    def review_date(self, review_date):
        """Sets the review_date of this Review.

        Represents the date and time when this Result was last reviewed.  # noqa: E501

        :param review_date: The review_date of this Review.  # noqa: E501
        :type: datetime
        """

        self._review_date = review_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Review):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
