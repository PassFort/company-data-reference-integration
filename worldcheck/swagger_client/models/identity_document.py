# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.entity import Entity  # noqa: F401,E501
from swagger_client.models.identity_document_location_type import IdentityDocumentLocationType  # noqa: F401,E501


class IdentityDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'Entity',
        'expiry_date': 'str',
        'issue_date': 'str',
        'issuer': 'str',
        'location_type': 'IdentityDocumentLocationType',
        'number': 'str',
        'type': 'str'
    }

    attribute_map = {
        'entity': 'entity',
        'expiry_date': 'expiryDate',
        'issue_date': 'issueDate',
        'issuer': 'issuer',
        'location_type': 'locationType',
        'number': 'number',
        'type': 'type'
    }

    def __init__(self, entity=None, expiry_date=None, issue_date=None, issuer=None, location_type=None, number=None, type=None):  # noqa: E501
        """IdentityDocument - a model defined in Swagger"""  # noqa: E501

        self._entity = None
        self._expiry_date = None
        self._issue_date = None
        self._issuer = None
        self._location_type = None
        self._number = None
        self._type = None
        self.discriminator = None

        if entity is not None:
            self.entity = entity
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if issue_date is not None:
            self.issue_date = issue_date
        if issuer is not None:
            self.issuer = issuer
        if location_type is not None:
            self.location_type = location_type
        if number is not None:
            self.number = number
        if type is not None:
            self.type = type

    @property
    def entity(self):
        """Gets the entity of this IdentityDocument.  # noqa: E501


        :return: The entity of this IdentityDocument.  # noqa: E501
        :rtype: Entity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this IdentityDocument.


        :param entity: The entity of this IdentityDocument.  # noqa: E501
        :type: Entity
        """

        self._entity = entity

    @property
    def expiry_date(self):
        """Gets the expiry_date of this IdentityDocument.  # noqa: E501


        :return: The expiry_date of this IdentityDocument.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this IdentityDocument.


        :param expiry_date: The expiry_date of this IdentityDocument.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def issue_date(self):
        """Gets the issue_date of this IdentityDocument.  # noqa: E501


        :return: The issue_date of this IdentityDocument.  # noqa: E501
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this IdentityDocument.


        :param issue_date: The issue_date of this IdentityDocument.  # noqa: E501
        :type: str
        """

        self._issue_date = issue_date

    @property
    def issuer(self):
        """Gets the issuer of this IdentityDocument.  # noqa: E501


        :return: The issuer of this IdentityDocument.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this IdentityDocument.


        :param issuer: The issuer of this IdentityDocument.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def location_type(self):
        """Gets the location_type of this IdentityDocument.  # noqa: E501


        :return: The location_type of this IdentityDocument.  # noqa: E501
        :rtype: IdentityDocumentLocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this IdentityDocument.


        :param location_type: The location_type of this IdentityDocument.  # noqa: E501
        :type: IdentityDocumentLocationType
        """

        self._location_type = location_type

    @property
    def number(self):
        """Gets the number of this IdentityDocument.  # noqa: E501


        :return: The number of this IdentityDocument.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IdentityDocument.


        :param number: The number of this IdentityDocument.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def type(self):
        """Gets the type of this IdentityDocument.  # noqa: E501


        :return: The type of this IdentityDocument.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentityDocument.


        :param type: The type of this IdentityDocument.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
