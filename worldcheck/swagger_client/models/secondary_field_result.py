# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.abstract_field import AbstractField  # noqa: F401,E501
from swagger_client.models.field import Field  # noqa: F401,E501
from swagger_client.models.field_result import FieldResult  # noqa: F401,E501


class SecondaryFieldResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_id': 'str',
        'field': 'Field',
        'submitted_value': 'str',
        'submitted_date_time_value': 'datetime',
        'matched_value': 'str',
        'matched_date_time_value': 'datetime',
        'field_result': 'FieldResult'
    }

    attribute_map = {
        'type_id': 'typeId',
        'field': 'field',
        'submitted_value': 'submittedValue',
        'submitted_date_time_value': 'submittedDateTimeValue',
        'matched_value': 'matchedValue',
        'matched_date_time_value': 'matchedDateTimeValue',
        'field_result': 'fieldResult'
    }

    def __init__(self, type_id=None, field=None, submitted_value=None, submitted_date_time_value=None, matched_value=None, matched_date_time_value=None, field_result=None):  # noqa: E501
        """SecondaryFieldResult - a model defined in Swagger"""  # noqa: E501

        self._type_id = None
        self._field = None
        self._submitted_value = None
        self._submitted_date_time_value = None
        self._matched_value = None
        self._matched_date_time_value = None
        self._field_result = None
        self.discriminator = None

        self.type_id = type_id
        self.field = field
        if submitted_value is not None:
            self.submitted_value = submitted_value
        if submitted_date_time_value is not None:
            self.submitted_date_time_value = submitted_date_time_value
        if matched_value is not None:
            self.matched_value = matched_value
        if matched_date_time_value is not None:
            self.matched_date_time_value = matched_date_time_value
        self.field_result = field_result

    @property
    def type_id(self):
        """Gets the type_id of this SecondaryFieldResult.  # noqa: E501

        Type Identifier of this Field  # noqa: E501

        :return: The type_id of this SecondaryFieldResult.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this SecondaryFieldResult.

        Type Identifier of this Field  # noqa: E501

        :param type_id: The type_id of this SecondaryFieldResult.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501
        if type_id is not None and len(type_id) > 255:
            raise ValueError("Invalid value for `type_id`, length must be less than or equal to `255`")  # noqa: E501

        self._type_id = type_id

    @property
    def field(self):
        """Gets the field of this SecondaryFieldResult.  # noqa: E501

        Matched [Field] (#Field) data. Deprecated in favor of matchedValue and matchedDateTimeValue.  # noqa: E501

        :return: The field of this SecondaryFieldResult.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SecondaryFieldResult.

        Matched [Field] (#Field) data. Deprecated in favor of matchedValue and matchedDateTimeValue.  # noqa: E501

        :param field: The field of this SecondaryFieldResult.  # noqa: E501
        :type: Field
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def submitted_value(self):
        """Gets the submitted_value of this SecondaryFieldResult.  # noqa: E501

        Submitted value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) other than `DATE`.  # noqa: E501

        :return: The submitted_value of this SecondaryFieldResult.  # noqa: E501
        :rtype: str
        """
        return self._submitted_value

    @submitted_value.setter
    def submitted_value(self, submitted_value):
        """Sets the submitted_value of this SecondaryFieldResult.

        Submitted value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) other than `DATE`.  # noqa: E501

        :param submitted_value: The submitted_value of this SecondaryFieldResult.  # noqa: E501
        :type: str
        """
        if submitted_value is not None and len(submitted_value) > 1000:
            raise ValueError("Invalid value for `submitted_value`, length must be less than or equal to `1000`")  # noqa: E501

        self._submitted_value = submitted_value

    @property
    def submitted_date_time_value(self):
        """Gets the submitted_date_time_value of this SecondaryFieldResult.  # noqa: E501

        Submitted date-time value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) `DATE`.  # noqa: E501

        :return: The submitted_date_time_value of this SecondaryFieldResult.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_date_time_value

    @submitted_date_time_value.setter
    def submitted_date_time_value(self, submitted_date_time_value):
        """Sets the submitted_date_time_value of this SecondaryFieldResult.

        Submitted date-time value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) `DATE`.  # noqa: E501

        :param submitted_date_time_value: The submitted_date_time_value of this SecondaryFieldResult.  # noqa: E501
        :type: datetime
        """

        self._submitted_date_time_value = submitted_date_time_value

    @property
    def matched_value(self):
        """Gets the matched_value of this SecondaryFieldResult.  # noqa: E501

        Matched value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) other than `DATE`.  # noqa: E501

        :return: The matched_value of this SecondaryFieldResult.  # noqa: E501
        :rtype: str
        """
        return self._matched_value

    @matched_value.setter
    def matched_value(self, matched_value):
        """Sets the matched_value of this SecondaryFieldResult.

        Matched value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) other than `DATE`.  # noqa: E501

        :param matched_value: The matched_value of this SecondaryFieldResult.  # noqa: E501
        :type: str
        """
        if matched_value is not None and len(matched_value) > 1000:
            raise ValueError("Invalid value for `matched_value`, length must be less than or equal to `1000`")  # noqa: E501

        self._matched_value = matched_value

    @property
    def matched_date_time_value(self):
        """Gets the matched_date_time_value of this SecondaryFieldResult.  # noqa: E501

        Matched date-time value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) `DATE`.  # noqa: E501

        :return: The matched_date_time_value of this SecondaryFieldResult.  # noqa: E501
        :rtype: datetime
        """
        return self._matched_date_time_value

    @matched_date_time_value.setter
    def matched_date_time_value(self, matched_date_time_value):
        """Sets the matched_date_time_value of this SecondaryFieldResult.

        Matched date-time value for this Secondary Field. Used for fields with [FieldValueType] (#FieldValueType) `DATE`.  # noqa: E501

        :param matched_date_time_value: The matched_date_time_value of this SecondaryFieldResult.  # noqa: E501
        :type: datetime
        """

        self._matched_date_time_value = matched_date_time_value

    @property
    def field_result(self):
        """Gets the field_result of this SecondaryFieldResult.  # noqa: E501


        :return: The field_result of this SecondaryFieldResult.  # noqa: E501
        :rtype: FieldResult
        """
        return self._field_result

    @field_result.setter
    def field_result(self, field_result):
        """Sets the field_result of this SecondaryFieldResult.


        :param field_result: The field_result of this SecondaryFieldResult.  # noqa: E501
        :type: FieldResult
        """
        if field_result is None:
            raise ValueError("Invalid value for `field_result`, must not be `None`")  # noqa: E501

        self._field_result = field_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecondaryFieldResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
