# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AbstractResolution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_id': 'str',
        'risk_id': 'str',
        'reason_id': 'str',
        'resolution_remark': 'str'
    }

    attribute_map = {
        'status_id': 'statusId',
        'risk_id': 'riskId',
        'reason_id': 'reasonId',
        'resolution_remark': 'resolutionRemark'
    }

    def __init__(self, status_id=None, risk_id=None, reason_id=None, resolution_remark=None):  # noqa: E501
        """AbstractResolution - a model defined in Swagger"""  # noqa: E501

        self._status_id = None
        self._risk_id = None
        self._reason_id = None
        self._resolution_remark = None
        self.discriminator = None

        if status_id is not None:
            self.status_id = status_id
        if risk_id is not None:
            self.risk_id = risk_id
        if reason_id is not None:
            self.reason_id = reason_id
        if resolution_remark is not None:
            self.resolution_remark = resolution_remark

    @property
    def status_id(self):
        """Gets the status_id of this AbstractResolution.  # noqa: E501

        Unique status ID defined in Group's resolution toolkit and used when resolving this Result. Get the available status IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :return: The status_id of this AbstractResolution.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AbstractResolution.

        Unique status ID defined in Group's resolution toolkit and used when resolving this Result. Get the available status IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :param status_id: The status_id of this AbstractResolution.  # noqa: E501
        :type: str
        """
        if status_id is not None and len(status_id) > 255:
            raise ValueError("Invalid value for `status_id`, length must be less than or equal to `255`")  # noqa: E501

        self._status_id = status_id

    @property
    def risk_id(self):
        """Gets the risk_id of this AbstractResolution.  # noqa: E501

        Unique risk ID defined in Group's resolution toolkit and used when resolving this Result. Get the available risk IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :return: The risk_id of this AbstractResolution.  # noqa: E501
        :rtype: str
        """
        return self._risk_id

    @risk_id.setter
    def risk_id(self, risk_id):
        """Sets the risk_id of this AbstractResolution.

        Unique risk ID defined in Group's resolution toolkit and used when resolving this Result. Get the available risk IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :param risk_id: The risk_id of this AbstractResolution.  # noqa: E501
        :type: str
        """
        if risk_id is not None and len(risk_id) > 255:
            raise ValueError("Invalid value for `risk_id`, length must be less than or equal to `255`")  # noqa: E501

        self._risk_id = risk_id

    @property
    def reason_id(self):
        """Gets the reason_id of this AbstractResolution.  # noqa: E501

        Unique reason ID defined in Group's resolution toolkit and used when resolving this Result. Get the available reason IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :return: The reason_id of this AbstractResolution.  # noqa: E501
        :rtype: str
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this AbstractResolution.

        Unique reason ID defined in Group's resolution toolkit and used when resolving this Result. Get the available reason IDs and their details via `groups/{group_id}/resolutionToolkit`.   # noqa: E501

        :param reason_id: The reason_id of this AbstractResolution.  # noqa: E501
        :type: str
        """
        if reason_id is not None and len(reason_id) > 255:
            raise ValueError("Invalid value for `reason_id`, length must be less than or equal to `255`")  # noqa: E501

        self._reason_id = reason_id

    @property
    def resolution_remark(self):
        """Gets the resolution_remark of this AbstractResolution.  # noqa: E501

        Resolution remark added when resolving this Result.  # noqa: E501

        :return: The resolution_remark of this AbstractResolution.  # noqa: E501
        :rtype: str
        """
        return self._resolution_remark

    @resolution_remark.setter
    def resolution_remark(self, resolution_remark):
        """Sets the resolution_remark of this AbstractResolution.

        Resolution remark added when resolving this Result.  # noqa: E501

        :param resolution_remark: The resolution_remark of this AbstractResolution.  # noqa: E501
        :type: str
        """
        if resolution_remark is not None and len(resolution_remark) > 2000:
            raise ValueError("Invalid value for `resolution_remark`, length must be less than or equal to `2000`")  # noqa: E501

        self._resolution_remark = resolution_remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractResolution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
