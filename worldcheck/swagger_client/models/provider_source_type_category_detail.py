# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.provider_source_type import ProviderSourceType  # noqa: F401,E501


class ProviderSourceTypeCategoryDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'identifier': 'str',
        'name': 'str',
        'provider_source_types': 'list[ProviderSourceType]'
    }

    attribute_map = {
        'description': 'description',
        'identifier': 'identifier',
        'name': 'name',
        'provider_source_types': 'providerSourceTypes'
    }

    def __init__(self, description=None, identifier=None, name=None, provider_source_types=None):  # noqa: E501
        """ProviderSourceTypeCategoryDetail - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._identifier = None
        self._name = None
        self._provider_source_types = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if identifier is not None:
            self.identifier = identifier
        if name is not None:
            self.name = name
        if provider_source_types is not None:
            self.provider_source_types = provider_source_types

    @property
    def description(self):
        """Gets the description of this ProviderSourceTypeCategoryDetail.  # noqa: E501


        :return: The description of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProviderSourceTypeCategoryDetail.


        :param description: The description of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def identifier(self):
        """Gets the identifier of this ProviderSourceTypeCategoryDetail.  # noqa: E501


        :return: The identifier of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ProviderSourceTypeCategoryDetail.


        :param identifier: The identifier of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this ProviderSourceTypeCategoryDetail.  # noqa: E501


        :return: The name of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderSourceTypeCategoryDetail.


        :param name: The name of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_source_types(self):
        """Gets the provider_source_types of this ProviderSourceTypeCategoryDetail.  # noqa: E501

        List of all source types that belong to this category.  # noqa: E501

        :return: The provider_source_types of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :rtype: list[ProviderSourceType]
        """
        return self._provider_source_types

    @provider_source_types.setter
    def provider_source_types(self, provider_source_types):
        """Sets the provider_source_types of this ProviderSourceTypeCategoryDetail.

        List of all source types that belong to this category.  # noqa: E501

        :param provider_source_types: The provider_source_types of this ProviderSourceTypeCategoryDetail.  # noqa: E501
        :type: list[ProviderSourceType]
        """

        self._provider_source_types = provider_source_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderSourceTypeCategoryDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
