# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.contact_detail_type import ContactDetailType  # noqa: F401,E501
from swagger_client.models.country import Country  # noqa: F401,E501


class ContactDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_detail_id': 'int',
        'contact_detail_type': 'ContactDetailType',
        'country': 'Country',
        'detail': 'str'
    }

    attribute_map = {
        'contact_detail_id': 'contactDetailId',
        'contact_detail_type': 'contactDetailType',
        'country': 'country',
        'detail': 'detail'
    }

    def __init__(self, contact_detail_id=None, contact_detail_type=None, country=None, detail=None):  # noqa: E501
        """ContactDetail - a model defined in Swagger"""  # noqa: E501

        self._contact_detail_id = None
        self._contact_detail_type = None
        self._country = None
        self._detail = None
        self.discriminator = None

        if contact_detail_id is not None:
            self.contact_detail_id = contact_detail_id
        if contact_detail_type is not None:
            self.contact_detail_type = contact_detail_type
        if country is not None:
            self.country = country
        if detail is not None:
            self.detail = detail

    @property
    def contact_detail_id(self):
        """Gets the contact_detail_id of this ContactDetail.  # noqa: E501


        :return: The contact_detail_id of this ContactDetail.  # noqa: E501
        :rtype: int
        """
        return self._contact_detail_id

    @contact_detail_id.setter
    def contact_detail_id(self, contact_detail_id):
        """Sets the contact_detail_id of this ContactDetail.


        :param contact_detail_id: The contact_detail_id of this ContactDetail.  # noqa: E501
        :type: int
        """

        self._contact_detail_id = contact_detail_id

    @property
    def contact_detail_type(self):
        """Gets the contact_detail_type of this ContactDetail.  # noqa: E501


        :return: The contact_detail_type of this ContactDetail.  # noqa: E501
        :rtype: ContactDetailType
        """
        return self._contact_detail_type

    @contact_detail_type.setter
    def contact_detail_type(self, contact_detail_type):
        """Sets the contact_detail_type of this ContactDetail.


        :param contact_detail_type: The contact_detail_type of this ContactDetail.  # noqa: E501
        :type: ContactDetailType
        """

        self._contact_detail_type = contact_detail_type

    @property
    def country(self):
        """Gets the country of this ContactDetail.  # noqa: E501


        :return: The country of this ContactDetail.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactDetail.


        :param country: The country of this ContactDetail.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def detail(self):
        """Gets the detail of this ContactDetail.  # noqa: E501


        :return: The detail of this ContactDetail.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ContactDetail.


        :param detail: The detail of this ContactDetail.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
