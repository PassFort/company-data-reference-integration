# coding: utf-8

"""
    Thomson Reuters World-Check One API

    The World-Check One API enables developers to integrate the next generation of Thomson Reuters screening capabilities into existing workflows and internal systems (such as CRMs) in order to help streamline the processes for on-boarding, KYC and third party due diligence. The API provides, among other features: - The ability to screen entity names, with or without secondary fields such as date of birth for individuals. These names are called “cases” within the World-Check One system. - The ability to retrieve results of the screening process from the World-Check database - The ability to flag cases for Ongoing Screening, and retrieve the World-Check results from the Ongoing Screening process. > © 2017 Thomson Reuters. All rights reserved. Republication or redistribution of Thomson Reuters content, including by framing or similar means, is prohibited without the prior written consent of Thomson Reuters. 'Thomson Reuters' and the Thomson Reuters logo are registered trademarks and trademarks of Thomson Reuters and its affiliated companies.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: Thomson-FCR.PS@Thomsonreuters.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CaseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def case_identifiers_head(self, case_id, **kwargs):  # noqa: E501
        """Check if a given caseId is available for use  # noqa: E501

        caseIds must be unique within each Client. If any Group under a Client has a Case with a particular caseId, that caseId cannot be reused on another Case within the same Client. This endpoint allows the user to check if a given caseId is available to use when creating or updating a Case.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.case_identifiers_head(case_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_id: Id to check if it is available to use as a caseId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.case_identifiers_head_with_http_info(case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.case_identifiers_head_with_http_info(case_id, **kwargs)  # noqa: E501
            return data

    def case_identifiers_head_with_http_info(self, case_id, **kwargs):  # noqa: E501
        """Check if a given caseId is available for use  # noqa: E501

        caseIds must be unique within each Client. If any Group under a Client has a Case with a particular caseId, that caseId cannot be reused on another Case within the same Client. This endpoint allows the user to check if a given caseId is available to use when creating or updating a Case.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.case_identifiers_head_with_http_info(case_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_id: Id to check if it is available to use as a caseId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method case_identifiers_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_id' is set
        if ('case_id' not in params or
                params['case_id'] is None):
            raise ValueError("Missing the required parameter `case_id` when calling `case_identifiers_head`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'case_id' in params:
            query_params.append(('caseId', params['case_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/caseIdentifiers', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def case_references_get(self, case_id, **kwargs):  # noqa: E501
        """Return the CaseReference (caseId, caseSystemId) for a caseId  # noqa: E501

        Returns the CaseReference containing the caseId and caseSystemId pair for an existing Case with the given caseId. This is useful if only the caseId is known but caseSystemId is required by other endpoints such as 'GET /cases/{caseSystemId}'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.case_references_get(case_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_id: Case ID provided by the client or else generated by the system for the client (required)
        :return: CaseReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.case_references_get_with_http_info(case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.case_references_get_with_http_info(case_id, **kwargs)  # noqa: E501
            return data

    def case_references_get_with_http_info(self, case_id, **kwargs):  # noqa: E501
        """Return the CaseReference (caseId, caseSystemId) for a caseId  # noqa: E501

        Returns the CaseReference containing the caseId and caseSystemId pair for an existing Case with the given caseId. This is useful if only the caseId is known but caseSystemId is required by other endpoints such as 'GET /cases/{caseSystemId}'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.case_references_get_with_http_info(case_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_id: Case ID provided by the client or else generated by the system for the client (required)
        :return: CaseReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method case_references_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_id' is set
        if ('case_id' not in params or
                params['case_id'] is None):
            raise ValueError("Missing the required parameter `case_id` when calling `case_references_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'case_id' in params:
            query_params.append(('caseId', params['case_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/caseReferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CaseReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_audit_events_post(self, case_system_id, **kwargs):  # noqa: E501
        """Get a filtered list of AuditEvents for a Case by its caseSystemId  # noqa: E501

        Return all audit events related to cases visible to the current user. Caller may filter and sort the response by:  **eventDate**: The time when the Audit Event was created (ISO 8601 format excluding Week and Ordinal dates)         e.g. eventDate>=2010-07-28T22:25:51Z;eventDate<2015-07-28T22:25:51Z   **actionType**: Signifies the event links to a Case object.           Please refer to ``ActionType`` object for detailed description.         e.g. actionType=='ASSIGN_CASE'             actionType=in=('ASSIGN_CASE', 'NEW_MATCH')   **actionedByUserId**: Identifier of the User who created this audit event.            Please refer to ``AuditEvent/properties/actionedByUserId`` for detailed description.         e.g. actionedByUserId==663b4481-5b45-40a4-8b76-54ef805beea5   **The above criteria can also be combined**         e.g. eventDate>=20120915T155300;eventDate<=2015-07-28T22:25:51Z;actionType=='NEW_MATCH'             actionedByUserId==663b4481-5b45-40a4-8b76-54ef805beea5;eventDate>=2010-07-28T22:25:51Z  **Please note that the above examples are only for the ``query`` part of the Filter**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_audit_events_post(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param Filter filter: Filter the AuditEvents in the response
        :return: AuditSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_audit_events_post_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_audit_events_post_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_audit_events_post_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Get a filtered list of AuditEvents for a Case by its caseSystemId  # noqa: E501

        Return all audit events related to cases visible to the current user. Caller may filter and sort the response by:  **eventDate**: The time when the Audit Event was created (ISO 8601 format excluding Week and Ordinal dates)         e.g. eventDate>=2010-07-28T22:25:51Z;eventDate<2015-07-28T22:25:51Z   **actionType**: Signifies the event links to a Case object.           Please refer to ``ActionType`` object for detailed description.         e.g. actionType=='ASSIGN_CASE'             actionType=in=('ASSIGN_CASE', 'NEW_MATCH')   **actionedByUserId**: Identifier of the User who created this audit event.            Please refer to ``AuditEvent/properties/actionedByUserId`` for detailed description.         e.g. actionedByUserId==663b4481-5b45-40a4-8b76-54ef805beea5   **The above criteria can also be combined**         e.g. eventDate>=20120915T155300;eventDate<=2015-07-28T22:25:51Z;actionType=='NEW_MATCH'             actionedByUserId==663b4481-5b45-40a4-8b76-54ef805beea5;eventDate>=2010-07-28T22:25:51Z  **Please note that the above examples are only for the ``query`` part of the Filter**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_audit_events_post_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param Filter filter: Filter the AuditEvents in the response
        :return: AuditSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_audit_events_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_audit_events_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/auditEvents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuditSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_get(self, case_system_id, **kwargs):  # noqa: E501
        """Return the Case for the given caseSystemId  # noqa: E501

        Returns the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_get(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_get_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_get_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_get_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Return the Case for the given caseSystemId  # noqa: E501

        Returns the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_get_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Case',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_ongoing_screening_delete(self, case_system_id, **kwargs):  # noqa: E501
        """Disable OGS for a Case  # noqa: E501

        Disable Ongoing Screening for the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_ongoing_screening_delete(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_ongoing_screening_delete_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_ongoing_screening_delete_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_ongoing_screening_delete_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Disable OGS for a Case  # noqa: E501

        Disable Ongoing Screening for the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_ongoing_screening_delete_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_ongoing_screening_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_ongoing_screening_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/ongoingScreening', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_ongoing_screening_put(self, case_system_id, **kwargs):  # noqa: E501
        """Enable OGS for a Case  # noqa: E501

        Enable Ongoing Screening for the Case identified by the given caseSystemId. This will schedule the Case to be re-screened periodically by the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_ongoing_screening_put(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_ongoing_screening_put_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_ongoing_screening_put_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_ongoing_screening_put_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Enable OGS for a Case  # noqa: E501

        Enable Ongoing Screening for the Case identified by the given caseSystemId. This will schedule the Case to be re-screened periodically by the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_ongoing_screening_put_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_ongoing_screening_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_ongoing_screening_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/ongoingScreening', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_put(self, case_system_id, case, **kwargs):  # noqa: E501
        """Update an existing Case by its caseSystemId  # noqa: E501

        Updates an existing Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_put(case_system_id, case, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param UpdateCase case: Update Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_put_with_http_info(case_system_id, case, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_put_with_http_info(case_system_id, case, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_put_with_http_info(self, case_system_id, case, **kwargs):  # noqa: E501
        """Update an existing Case by its caseSystemId  # noqa: E501

        Updates an existing Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_put_with_http_info(case_system_id, case, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param UpdateCase case: Update Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id', 'case']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_put`")  # noqa: E501
        # verify the required parameter 'case' is set
        if ('case' not in params or
                params['case'] is None):
            raise ValueError("Missing the required parameter `case` when calling `cases_case_system_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case' in params:
            body_params = params['case']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Case',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_results_get(self, case_system_id, **kwargs):  # noqa: E501
        """Get collection of Results for a Case by its caseSystemId  # noqa: E501

        Return a collection of Results for the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_get(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: list[Result]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_results_get_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_results_get_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_results_get_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Get collection of Results for a Case by its caseSystemId  # noqa: E501

        Return a collection of Results for the Case identified by the given caseSystemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_get_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: list[Result]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_results_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_results_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Result]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_results_resolution_put(self, case_system_id, results_resolution_action, **kwargs):  # noqa: E501
        """Resolves a list of results  # noqa: E501

        Resolves a list of results for the Case identified by the given caseSystemId. The endpoint for the resolution toolkit '/groups/{groupId}/resolutionToolkit' provides the resolution rules to be applied when resolving results of any [Case](#Case) within a specific [Group](#Group).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_resolution_put(case_system_id, results_resolution_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param ResultsResolutionAction results_resolution_action: Represents the request details required for resolving Results (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_results_resolution_put_with_http_info(case_system_id, results_resolution_action, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_results_resolution_put_with_http_info(case_system_id, results_resolution_action, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_results_resolution_put_with_http_info(self, case_system_id, results_resolution_action, **kwargs):  # noqa: E501
        """Resolves a list of results  # noqa: E501

        Resolves a list of results for the Case identified by the given caseSystemId. The endpoint for the resolution toolkit '/groups/{groupId}/resolutionToolkit' provides the resolution rules to be applied when resolving results of any [Case](#Case) within a specific [Group](#Group).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_resolution_put_with_http_info(case_system_id, results_resolution_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param ResultsResolutionAction results_resolution_action: Represents the request details required for resolving Results (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id', 'results_resolution_action']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_results_resolution_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_results_resolution_put`")  # noqa: E501
        # verify the required parameter 'results_resolution_action' is set
        if ('results_resolution_action' not in params or
                params['results_resolution_action'] is None):
            raise ValueError("Missing the required parameter `results_resolution_action` when calling `cases_case_system_id_results_resolution_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'results_resolution_action' in params:
            body_params = params['results_resolution_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/results/resolution', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_results_review_post(self, case_system_id, results_review_remark, **kwargs):  # noqa: E501
        """Add a review remark to the specified result IDs for the given case  # noqa: E501

        Add a review remark to the specified result IDs for the given case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_review_post(case_system_id, results_review_remark, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param ResultsReviewRemark results_review_remark: Object representing the IDs to be reviewed, and the review remark (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_results_review_post_with_http_info(case_system_id, results_review_remark, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_results_review_post_with_http_info(case_system_id, results_review_remark, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_results_review_post_with_http_info(self, case_system_id, results_review_remark, **kwargs):  # noqa: E501
        """Add a review remark to the specified result IDs for the given case  # noqa: E501

        Add a review remark to the specified result IDs for the given case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_results_review_post_with_http_info(case_system_id, results_review_remark, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :param ResultsReviewRemark results_review_remark: Object representing the IDs to be reviewed, and the review remark (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id', 'results_review_remark']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_results_review_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_results_review_post`")  # noqa: E501
        # verify the required parameter 'results_review_remark' is set
        if ('results_review_remark' not in params or
                params['results_review_remark'] is None):
            raise ValueError("Missing the required parameter `results_review_remark` when calling `cases_case_system_id_results_review_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'results_review_remark' in params:
            body_params = params['results_review_remark']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/results/review', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_case_system_id_screening_request_post(self, case_system_id, **kwargs):  # noqa: E501
        """Request initial screening for a Case  # noqa: E501

        Make a request for screening of the Case identified by the given caseSystemId. The screening request is an asynchronous operation, and returns immediately. As a result of this call, the screening request will be queued to be processed. When this request has been processed, there will be a new `SCREENED_CASE` audit event that can be queried via `/cases/{caseSystemId}/auditEvents` and then the results can be retrieved via `/cases/{caseSystemId}/results`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_screening_request_post(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_case_system_id_screening_request_post_with_http_info(case_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_case_system_id_screening_request_post_with_http_info(case_system_id, **kwargs)  # noqa: E501
            return data

    def cases_case_system_id_screening_request_post_with_http_info(self, case_system_id, **kwargs):  # noqa: E501
        """Request initial screening for a Case  # noqa: E501

        Make a request for screening of the Case identified by the given caseSystemId. The screening request is an asynchronous operation, and returns immediately. As a result of this call, the screening request will be queued to be processed. When this request has been processed, there will be a new `SCREENED_CASE` audit event that can be queried via `/cases/{caseSystemId}/auditEvents` and then the results can be retrieved via `/cases/{caseSystemId}/results`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_case_system_id_screening_request_post_with_http_info(case_system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str case_system_id: System generated ID for the Case (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case_system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_case_system_id_screening_request_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case_system_id' is set
        if ('case_system_id' not in params or
                params['case_system_id'] is None):
            raise ValueError("Missing the required parameter `case_system_id` when calling `cases_case_system_id_screening_request_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'case_system_id' in params:
            path_params['caseSystemId'] = params['case_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/{caseSystemId}/screeningRequest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_ongoing_screening_updates_post(self, filter, **kwargs):  # noqa: E501
        """Get ongoing screening updates.  # noqa: E501

        Get ongoing screening updates for all `Case` objects that are visible to the current user and are flagged for ongoing screening.  Filter and sort the ongoing screening updates in the response by:    **updateDate**: The date and time of this ongoing screening update in ISO 8601 format (excluding Week and   Ordinal dates).  Required.    e.g. Filter body that specifies the page size to be `50` and queries the first page of ongoing screening updates   occurred since `2016-07-26T00:00:00Z` sorted by `updateDate` in `DESCENDING` order:      {       \"query\": \"updateDate>='2016-07-26T00:00:00Z'\",       \"sort\": {         \"columnName\": \"updateDate\",         \"order\": \"DESCENDING\"       },       \"pagination\": {         \"currentPage\": 1,         \"itemsPerPage\": 50       }     }   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_ongoing_screening_updates_post(filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param Filter filter: Filter and sort the ongoing screening updates in the response. (required)
        :return: OngoingScreeningUpdateSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_ongoing_screening_updates_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_ongoing_screening_updates_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def cases_ongoing_screening_updates_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get ongoing screening updates.  # noqa: E501

        Get ongoing screening updates for all `Case` objects that are visible to the current user and are flagged for ongoing screening.  Filter and sort the ongoing screening updates in the response by:    **updateDate**: The date and time of this ongoing screening update in ISO 8601 format (excluding Week and   Ordinal dates).  Required.    e.g. Filter body that specifies the page size to be `50` and queries the first page of ongoing screening updates   occurred since `2016-07-26T00:00:00Z` sorted by `updateDate` in `DESCENDING` order:      {       \"query\": \"updateDate>='2016-07-26T00:00:00Z'\",       \"sort\": {         \"columnName\": \"updateDate\",         \"order\": \"DESCENDING\"       },       \"pagination\": {         \"currentPage\": 1,         \"itemsPerPage\": 50       }     }   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_ongoing_screening_updates_post_with_http_info(filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param Filter filter: Filter and sort the ongoing screening updates in the response. (required)
        :return: OngoingScreeningUpdateSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_ongoing_screening_updates_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `cases_ongoing_screening_updates_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases/ongoingScreeningUpdates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OngoingScreeningUpdateSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cases_post(self, case, **kwargs):  # noqa: E501
        """Create a new case  # noqa: E501

        Creates a new Case  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_post(case, async=True)
        >>> result = thread.get()

        :param async bool
        :param NewCase case: Create Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cases_post_with_http_info(case, **kwargs)  # noqa: E501
        else:
            (data) = self.cases_post_with_http_info(case, **kwargs)  # noqa: E501
            return data

    def cases_post_with_http_info(self, case, **kwargs):  # noqa: E501
        """Create a new case  # noqa: E501

        Creates a new Case  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cases_post_with_http_info(case, async=True)
        >>> result = thread.get()

        :param async bool
        :param NewCase case: Create Case (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['case']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cases_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'case' is set
        if ('case' not in params or
                params['case'] is None):
            raise ValueError("Missing the required parameter `case` when calling `cases_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case' in params:
            body_params = params['case']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Case',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
